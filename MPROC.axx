	.file	"mproc.asm"
	.title	"GSP multi-processing system"
	.width	132
	.option	b,d,l,t
	.mnolist


	.include	gsp.equ
	.include	sys.equ
	.include	mproc.equ
	.include	disp.equ
	.include	game.equ
	.include	"shawn.hdr"


	.ref	dirqtimer
	
	.ref	obj_yzsort
	.ref	L_TIMER			;Audit

	.if	DEBUG
	.ref	SLDEBUG
	.ref	slowmotion
	.endif



	.bss	PRCSTR	,NPROC*PRCSIZ	;Process data blocks



	.sect	"FIXED"
ACTIVE	.long	0
FREE	.long	0


	.text



 SUBR	process_init

	movi	ACTIVE,a13	;Init A13
	clr	a0
	move	a0,*a13,L	;Empty list

	movi	PRCSTR,a1
	move	a1,@FREE,L	;Full free list

	movi	NPROC,b0	;# of processes
nkzelp	move	a1,a14
	addi	PRCSIZ,a1
	move	a1,*a14,L	;Set link
	dsj	b0,nkzelp

	move	a0,*a14,L	;Null last link

	rets



 SUBR	process_dispatch

	.if	DEBUG
	move	@SLDEBUG,a0
	jrnn	xcjvnoline

	movi	31*32,a0		;Proc usage
	move	a0,@ERASELOC

xcjvdmawt	move	b13,b13
	jrge	xcjvdmawt
	movk	6,a0			;DMA usage
	move	a0,@ERASELOC
xcjvnoline
	move	@slowmotion,a0
xcjvsmlp	move	@dirqtimer,a1
	cmp	a1,a0
	jrge	xcjvsmlp

	.endif

	movi	ACTIVE,a13		;*Proc list
	clr	a0
	move	a0,@dirqtimer		;Tell DIRQ to flip and draw

xcjvlp	calla	obj_yzsort		;Sort display list
	move	@dirqtimer,a0
	jrz	xcjvlp			;Wait?


	calla	L_TIMER			;Linky timer

	jruc	prcd1


PRCSLP
	PULL	a7			;Get *Wakeup

PRCLSP	move	a13,a1
	addi	PDATA,a1
	mmtm	a1,a7,a8,a9,a10,a11,a12 ;*Wakeup, regs, *stack
	move	a0,-*a1			;sleep





	.if	DEBUG
	move	a13,a0
	addi	PSDATA,a0
	cmp	a0,a12
	jrlt	$			;stick on stack overflow
	addi	PRCSIZ-PSDATA,a0
	cmp	a0,a12
	jrgt	$			;stick on stack underflow
	.endif

prcd1
	move	*a13,a13,L
	jrz	prcdx			;End?
	move	*a13(PTIME),a0		;Get count
	subk	1,a0
	move	a0,*a13(PTIME)		;Put it back
	jrgt	prcd1			;Not ready?


	move	a13,a1			;0DHispatch
	addi	040H,a1
	mmfm	a1,a7,a8,a9,a10,a11,a12	;*Wake, regs, *stack
	jump	a7			;Do process


prcdx	rets



SUCIDE
	movi	ACTIVE,a1
suclp	move	a1,a2		;save previous
	move	*a1,a1,L
	jrz	sucerr

	cmp	a1,a13
	jrne	suclp		;!Us



	.if	DEBUG

	PUSH	a5
	move	*a1(PROCID),a5
	cmpi	takepid,a5
	jrz	udkocaught


	jruc	udkonocaught

udkocaught
	LOCKUP

udkonocaught

	PULL	a5

	.endif






	move	*a1,*a2,L	;Unlink
	move	@FREE,*a1+,L	;Link into free list at start
	subk	32,a1
	move	a1,@FREE,L

	move	a2,a13		;Set current process to previous
	jruc	prcd1		;Continue with dispatch

sucerr
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	5,0
	.endif
	movi	ACTIVE,a13	;*Proc list
	jruc	prcd1



KILL
	cmp	a0,a13
	jreq	augvx		;Killing self?

	movi	ACTIVE,a1

augvlp	move	a1,a14		;Save previous
	move	*a1,a1,L
	jrz	killerr		;Can't find?
	cmp	a1,a0
	jrne	augvlp		;Not the one?


	.if	DEBUG

	PUSH	a2
	move	*a1(PROCID),a2,L
	cmpi	takepid,a2
	jrnz	augvok
	LOCKUP
augvok	PULL	a2

	.endif





	move	*a0,*a14,L	;Unlink from active
	move	@FREE,*a0+,L	;Link into free list at start
	subk	32,a0
	move	a0,@FREE,L

augvx	rets

killerr
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	6,0
	.endif
	jruc	augvx



GETPRC
	move	a12,b0

	move	@FREE,a0,L
	jrz	nonelft		;No more?
	move	*a0,a14,L
	move	a14,@FREE,L	;Unlink from free list
	move	*a13,*a0,L	;Link into active list after current process
	move	a0,*a13,L
	jruc	xferprc0

nonelft
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	4,2
	.endif
	jruc	getpx


XFERPROC
	move	a12,b0
xferprc0
	cmpi	ROM,a7
	jrlo	procwakeerr		;Error?


	.if	DEBUG

	PUSH	a1
	calla	process_exist
	jrnz	augvfound
	PULL	a1
      
	LOCKUP
	jruc	augvcont
augvfound
	PULL	a1
augvcont

	move	*a0(PROCID),a14
	cmpi	takepid,a14
	jrnz	augvtag2

	LOCKUP
augvtag2
	.endif




	move	a0,a14
	addi	PDATA,a14
	move	a0,a12			;Reset process stack pointer
	addi	PRCSIZ,a12
	mmtm	a14,a7,a8,a9,a10,a11,a12 ;Stuff wake, regs, p stack ptr
	movk	1,a12
	move	a12,-*a14		;Wakeup next time
	move	a1,-*a14		;ID

getpx	move	b0,a12
	rets				;Flags are trashed!!!

procwakeerr
	.if	DEBUG
	LOCKUP
	eint
	.else
	CALLERR	7,0
	.endif
	jruc	getpx



KILALL
	not	a1
	jruc	KILALLN



KIL1C
	clr	a1


KILALLN
	move	a2,b0
	move	a3,b1

	zext	a1		;Won't kill PIDS 08000H+
	andn	a1,a0		;Form match
	movi	ACTIVE,a2

bqaelp	move	a2,a3		;Save previous
	move	*a2,a2,L
	jrz	bqaex		;Done?
	move	*a2(PROCID),a14
	andn	a1,a14		;Apply mask
	cmp	a0,a14
	jrne	bqaelp		;No match?

	cmp	a2,a13
	jreq	bqaelp		;Current proecess?


	.if	DEBUG

	PUSH	a4
	move	*a2(PROCID),a4,L
	cmpi	takepid,a4
	jrnz	bqaeok
	LOCKUP
bqaeok	PULL	a4

	.endif







	move	*a2,*a3,L	;Unlink
	move	@FREE,a14,L	;Link into free list at start
	move	a14,*a2,L
	move	a2,@FREE,L
	move	a3,a2
	jruc	bqaelp

bqaex	move	b0,a2
	move	b1,a3
	rets



KOP_1C
	clr	a1


KOP_ALL
	move	a3,b0
	andn	a1,a0		;Form match
	movi	ACTIVE,a3,L

tuzolp	move	*a3,a3,L	;Get next
	jrz	tuzox		;End?
	move	*a3(PROCID),a14
	andn	a1,a14		;Mask
	cmp	a0,a14
	jrnz	tuzolp		;No match?

	move	*a3(PTIME),a14	;Add sleep
	add	a2,a14
	move	a14,*a3(PTIME)
	jruc	tuzolp

tuzox	move	b0,a3
	rets



process_exist
	movi	ACTIVE,a1

vskrlp	move	*a1,a1,L
	jrz	vskrx		;End?
	cmp	a0,a1
	jrne	vskrlp		;!Match?
	move	a0,a0		;Clr Z

vskrx	rets



EXISTP
	PUSH	a1,a2,a4

	sext	a0
	and	a1,a0		;form match
	movi	ACTIVE,a2

gbzflp	move	*a2,a2,L
	jrz	gbzfx		;End?
	move	*a2(PROCID),a4
	and	a1,a4
	cmp	a0,a4
	jrne	gbzflp		;!Match?

	cmp	a2,a13
	jreq	gbzflp		;Self?

gbzfx	move	a2,a0

	PULL	a1,a2,a4
	rets





	.end

