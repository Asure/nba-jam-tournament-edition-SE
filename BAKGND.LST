TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "bakgnd.asm"
       3                            .option b,d,l
       4                            .mnolist
       5                    
       6                            .include        "mproc.equ"
       7                            .include        "disp.equ"
       8                            .include        "gsp.equ"
       9                            .include        "sys.equ"
      10                            .include        "bgndtbl.glo"           ;background equates
      11                            .include        "imgtbl.glo"
      12                            .include        "game.equ"
      13                            .include        "shawn.hdr"
      14                    
      15                    
      16                    
      17                            .if     NMBPAL
      18                            .ref    pal_getb
      19                            .endif
      20                            .ref    pal_getf
      21                    
      22                            .ref    BAKLST
      23                    
      24                    
      25                    
      26                    
      27                    
      28                    
      29                    
      30 00000000                   .bss    BGNDPALTBL      ,32
      31 00000020                   .bss    MOD_POS         ,32
      32 00000000                   BSSX    BAKBITS         ,10000
      33                    
      34 00000000                   BSSX    BAKMODS         ,32
      35                    
      36                    
      37 00000000                   .text
      38                    
      39                    
      40              8000  BLSTSTRT        .EQU    08000H
      41              8001  BLSTEND         .EQU    08001H
      42                    
      43          00200020  DISP_PAD        .SET    [20h,20h]       ;Y:X
      44          00800020  DISP_PAD2       .SET    [80h,20h]       ;Y:X
      45              00fa  WIDEST_BLOCK    .SET    250
      46                    
      47              0000  MAP_PAL         .SET    0       ;SIZE 4 - PALETTE SELECT
      48              0004  MAP_FLAGS       .SET    4       ;SIZE 4 - BIT 0 HFLIP, BIT 1 YFLIP
      49              0008  MAP_Z           .SET    8       ;SIZE 8
      50              0010  MAP_X           .SET    16      ;SIZE 16
      51              0020  MAP_Y           .SET    32      ;SIZE 16
      52              0030  MAP_HDR         .SET    48      ;SIZE 16 - OFFSET IN LONG WORDS FROM BLOCK_HDR_TBL
      53                                                    ; BITS 12-15 ARE BITS 4-7 OF PAL
      54                                                    ; MAP_HDR SET TO 0FFFFH IF BLOCK IS NOT ALLOCATED
      55              0040  BLOCK_SIZE      .SET    64      ;Uses shifts!
      56                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    2

      57              0000  MAP_W           .set    0       ;Word
      58              0010  MAP_H           .set    16      ;Word
      59              0020  MAP_DATAPTR     .set    32      ;Long
      60              0040  MAP_CTRL        .equ    64      ;DMA ctrl word
      61                    
      62                    
      63                    
      64 00000000           BGNDHGHT
      65 00000000     098f          MMTM    SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
         00000010     79f0  
      66 00000020     4c01          MOVE    A0,A1
      67                    
      68 00000030     574a          CLR     A10             ;INIT PACKED Y:X STARTING POSITION
      69 00000040     576b          CLR     A11
      70                    
      71 00000050     07a0          MOVE    @BAKMODS,A0,L   ;* A0- PTR TO THE MODULE LIST
         00000060 00002750- 
      72 00000080     9608  MODLP0  MOVE    *A0+,A8,L       ;LOAD MODULE PTR
      73 00000090     ca2a          jrz     MODX0           ;End?
      74 000000a0     9709          MOVE    *A8+,A9,L       ;LOAD PACKED Y:X SIZE
      75                    
      76 000000b0     9403          MOVE    *A0+,A3         ;X START POSITION
      77 000000c0     0523          ZEXT    A3
      78 000000d0     0b63          CMPI    BLSTSTRT,A3
         000000e0 ffff7fff  
      79 00000100     cb03          JRNZ    NOTLSTSTRTX
      80 00000110     4d63          MOVE    A11,A3          
      81 00000120     e323          SUBXY   A9,A3
      82 00000130     c005          JRUC    GOTNEWX0
      83 00000140           NOTLSTSTRTX
      84 00000140     0b63          CMPI    BLSTEND,A3
         00000150 ffff7ffe  
      85 00000170     cb01          JRNZ    GOTNEWX0
      86 00000180     4d63          MOVE    A11,A3
      87 00000190           GOTNEWX0
      88 00000190     9404          MOVE    *A0+,A4         ;Y START POSITION
      89 000001a0     0524          ZEXT    A4
      90 000001b0     0b64          CMPI    BLSTSTRT,A4
         000001c0 ffff7fff  
      91 000001e0     cb03          JRNZ    NOTLSTSTRTY
      92 000001f0     4d64          MOVE    A11,A4          
      93 00000200     e324          SUBXY   A9,A4
      94 00000210     c007          JRUC    GOTNEWY0
      95 00000220           NOTLSTSTRTY
      96 00000220     0b64          CMPI    BLSTEND,A4
         00000230 ffff7ffe  
      97 00000250     cb02          JRNZ    NOTLSTENDY
      98 00000260     4d64          MOVE    A11,A4
      99 00000270     c001          JRUC    GOTNEWY0
     100 00000280           NOTLSTENDY
     101 00000280     2604          SLL     16,A4
     102 00000290           GOTNEWY0
     103 00000290     ee83          MOVY    A4,A3
     104 000002a0     4c6a          MOVE    A3,A10
     105                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    3

     106                    
     107                            ;IF MOD END X < X SOUGHT KEEP SEARCHING MOD LIST
     108 000002b0     4d4b          MOVE    A10,A11
     109 000002c0     e12b          ADDXY   A9,A11          ;A11 IS MODULE Y:X END
     110                    
     111 000002d0     9509          MOVE    *A8+,A9         ;LOAD # OF BLOCKS
     112 000002e0     4127          ADD     A9,A7           ;A7 IS NEW BAKBITS PTR
     113 000002f0     e561          CMPXY   A11,A1
     114 00000300     cdd7          JRNV    MODLP0          ;SKIP IF AX < BX
     115                    
     116 00000310     4d40          MOVE    A10,A0
     117 00000320     2e00          SRL     16,A0
     118 00000330     c001          JRUC    GOTHGHT
     119                    
     120 00000340     5600  MODX0   CLR     A0
     121 00000350     09af  GOTHGHT MMFM    SP,A1,A2,A3,A4,A7,A8,A9,A10,A11
         00000360     0f9e  
     122 00000370     0960          RETS
     123                    
     124                    
     125                    
     126                    
     127 00000380            SUBRP  bgnd_get1stx
     128                    
     129 00000380                   PUSH    a1,a2,a8,a9,a10
     130                    
     131 000003a0     5729          clr     a9              ;set low = 0
     132 000003b0     4422          sub     a1,a2
     133 000003c0     2f42          srl     6,a2            ;div by size of block (64)
     134 000003d0     0b01          addi    MAP_X,a1        ;block tbl base + x offset
         000003e0     0010  
     135 000003f0     18ae          movk    5,a14           ;threshhold for switching from binary to linear search
     136                    
     137 00000400     4c4a  eooxlp  move    a2,a10
     138 00000410     452a          sub     a9,a10          ;if (high - low) <= 5 finish with linear search
     139 00000420     49ca          cmp     a14,a10
     140 00000430     c60c          jrle    lsrch
     141                    
     142 00000440     2fea          srl     1,a10           ;/2
     143 00000450     412a          add     a9,a10
     144                    
     145 00000460     4d48          move    a10,a8          ;Get mid X
     146 00000470     24c8          sll     6,a8            ;multiply by block size (64)
     147 00000480     4028          add     a1,a8
     148 00000490     8508          move    *a8,a8          ;get x coor of the block
     149 000004a0     4808          cmp     a0,a8
     150 000004b0     c402          jrlt    blow
     151                    
     152 000004c0     4d42          move    a10,a2          ;high = mid
     153 000004d0     c0f2          jruc    eooxlp
     154 000004e0     4d49  blow    move    a10,a9          ;low = mid
     155 000004f0     c0f0          jruc    eooxlp
     156                    
     157 00000500           lsrch
     158                            ;* FINISH WITH A LINEAR SEARCH OF BLOCK TABLE FROM LOW TO HIGH
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    4

     159                            ;* ENDING WITH FIRST BLOCK X COOR THAT IS >= A0
     160                            ;* A0 = X VAL BEING SEARCHED FOR
     161                            ;* A9 = LOW ADDRESS -- PTS TO X OFFSET OF BLOCK
     162                            ;* A2 = HIGH ADDRESS -- PTS TO X OFFSET OF BLOCK
     163                    
     164 00000500     24c9          SLL     6,A9            ;LOW BLOCK # TO LOW BLOCK OFFSET
     165 00000510     24c2          SLL     6,A2            ;HIGH BLOCK # TO HIGH BLOCK OFFSET
     166 00000520     4029          ADD     A1,A9
     167 00000530     4022          ADD     A1,A2
     168 00000540     09c8          MOVI    BLOCK_SIZE,A8
         00000550     0040  
     169 00000560           eooxlinlp
     170 00000560     852a          MOVE    *A9,A10         ;X COOR
     171 00000570     480a          CMP     A0,A10
     172 00000580     c505          JRGE    GOTB            ;IF LOW->X >= A0 GOTO FOUND
     173 00000590     4109          ADD     A8,A9
     174 000005a0     4849          CMP     A2,A9
     175 000005b0     c6fa          jrle    eooxlinlp
     176 000005c0     5600          clr     a0              ;block not found, return 0
     177 000005d0     c003          jruc    eooxx
     178                    
     179 000005e0           GOTB
     180 000005e0     4d20          move    a9,a0           ;return a ptr to the block
     181 000005f0     0be0          subi    MAP_X,a0
         00000600     ffef  
     182                    
     183 00000610           eooxx
     184 00000610                   PULL    a1,a2,a8,a9,a10
     185 00000630     0960          rets
     186                    
     187                    
     188                            ;A0 - MODULE LIST
     189                            ;A0 - PACKED Y:X END OF WAVE
     190                    
     191                    
     192                    
     193                    
     194                    
     195 00000640            SUBR   BGND_UD1
     196                    
     197 00000640                   PUSH    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
     198 00000660                   PUSH    b2
     199                    
     200 00000670     07a3          move    @WORLDTL,a3,L
         00000680 00000000! 
     201 000006a0     4c64          move    a3,a4
     202 000006b0     07a0          move    @SCRNTL,a0,L
         000006c0 00000000! 
     203 000006e0     e003          addxy   a0,a3
     204 000006f0     07a0          move    @SCRNLR,a0,L
         00000700 00000000! 
     205 00000720     e004          addxy   a0,a4           
     206                    
     207 00000730     09e0          movi    DISP_PAD,a0     ;XY border pad
         00000740 00200020  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    5

     208                    
     209 00000760     e203          subxy   a0,a3           ;A3=DISP_TL
     210 00000770     e004          addxy   a0,a4           ;A4=DISP_LR
     211 00000780     09e8          movi    BAKLST,a8       ;A8=*bakgnd list
         00000790 00000000! 
     212 000007b0     0d3f          callr   bgnd_delnonvis
         000007c0     015a  
     213                    
     214 000007d0     07a0          move    @BAKMODS,a0,L   ;*Module list
         000007e0 00002750- 
     215 00000800     09e7          movi    BAKBITS,a7      ;Bit table for block being on disp list
         00000810 00000040- 
     216 00000830     09f2          movi    INSBOBJ,b2      ;*Insert routine
         00000840 00000000! 
     217 00000860     0d3f          callr   bgnd_scanmod
         00000870     0004  
     218                    
     219 00000880                   PULL    b2
     220 00000890                   PULL    a2,a3,a4,a5,a6,a7,a8,a9,a10,a11
     221 000008b0     0960          rets
     222                    
     223                    
     224                    
     225 000008c0            SUBRP  bgnd_scanmod
     226                    
     227 000008c0     4ce6          move    a7,a6           ;a6 will point to bakbits after mod
     228 000008d0     c016          jruc    qxdsnext
     229                    
     230 000008e0           qxdslp
     231 000008e0     9609          move    *a0+,a9,L       ;Y:X start
     232                    
     233 000008f0     970b          move    *a8+,a11,L      ;Mod Y:X size
     234 00000900     e12b          addxy   a9,a11          ;Mod Y:X end
     235                    
     236 00000910     9502          move    *a8+,a2         ;# of blocks
     237 00000920     4046          add     a2,a6           ;A6=*Next bakbits
     238                    
     239 00000930     e46b          cmpxy   a3,a11
     240 00000940                   jrxlt   qxdsnext                ;Mod x end < tl x ?
     241 00000950                   jrylt   qxdsnext                ;Mod y end < tl y ?
     242                    
     243 00000960     e524          cmpxy   a9,a4
     244 00000970                   jrxlt   qxdsnext                ;Mod x start > br x ?
     245 00000980                   jrylt   qxdsnext                ;Mod y start > br y ?
     246                    
     247 00000990     24c2          sll     6,a2            ;*64 (each block is 4 words)
     248 000009a0     9701          move    *a8+,a1,L       ;A1=*block table
     249 000009b0     4022          add     a1,a2           ;A2=*block table end
     250                    
     251 000009c0     9705          move    *a8+,a5,L       ;A5=*hdrs
     252 000009d0     970a          move    *a8+,a10,L      ;A10=*PAL table
     253 000009e0     e323          subxy   a9,a3
     254 000009f0     e324          subxy   a9,a4
     255 00000a00     0d3f          callr   bgnd_addmod
         00000a10     0006  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    6

     256 00000a20     e123          addxy   a9,a3
     257 00000a30     e124          addxy   a9,a4
     258                    
     259 00000a40     4cc7  qxdsnext        move    a6,a7
     260 00000a50     9608          move    *a0+,a8,L       ;* module
     261 00000a60     cbe7          jrnz    qxdslp          ;!End?
     262                    
     263                    
     264 00000a70     0960  qxdsx   rets
     265                    
     266                    
     267                    
     268 00000a80            SUBRP  bgnd_addmod
     269                    
     270 00000a80                   PUSH    a0,a6,a7
     271                    
     272 00000aa0     ec60          movx    a3,a0           ;find 1st universe block with x >= a9
     273 00000ab0     0500          sext    a0
     274 00000ac0     0be0          subi    WIDEST_BLOCK,a0 ;1st x coordinate of a block
         00000ad0     ff05  
     275 00000ae0     0d3f          callr   bgnd_get1stx
         00000af0     ff88  
     276 00000b00     ca4e          jrz     lwxtx           ;no blocks with > X ?
     277                    
     278 00000b10     09c6          movi    BLOCK_SIZE,a6
         00000b20     0040  
     279                    
     280 00000b30     4c08          move    a0,a8           ;A0=*Block
     281 00000b40     4428          sub     a1,a8           ;subtract off start of table
     282 00000b50     2f48          srl     6,a8            ;divide by block size (64)
     283 00000b60     40e8          add     a7,a8           ;a8=ptr to bit which indicates block on list
     284 00000b70     1508          subk    8,a8            ;after inc a8, use movb *a8 to load sign bit
     285 00000b80     44c0          sub     a6,a0           ;subtract block size
     286 00000b90     4c07          move    a0,a7
     287                    
     288 00000ba0           lwxtsclp1
     289 00000ba0     1028          addk    1,a8
     290 00000bb0     40c7          add     a6,a7           ;Next block
     291 00000bc0     4847          cmp     a2,a7
     292 00000bd0     c541          jrge    lwxtx           ;End?
     293                    
     294 00000be0     8f00          movb    *a8,a0          ;Check bakbit
     295 00000bf0     cefa          jrn     lwxtsclp1               ;Already displayed?
     296                    
     297 00000c00     b4e1          move    *a7(MAP_X),a1
         00000c10     0010  
     298 00000c20     e461          cmpxy   a3,a1
     299 00000c30                   JRXGE   lwxtqscanstrt   ;Block X >= TL X ? (Do quicker scan)
     300                    
     301 00000c40     b4ee          move    *a7(MAP_HDR),a14
         00000c50     0030  
     302 00000c60     268e          sll     32-12,a14       ;Bits 0-11 are hdr offset
     303 00000c70     2e0e          srl     32-12-4,a14     ;*16
     304 00000c80     4dc0          move    a14,a0          ;>*5
     305 00000c90     2440          sll     2,a0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    7

     306 00000ca0     400e          add     a0,a14
     307 00000cb0     40ae          add     a5,a14          ;A14=*Img hdr
     308                    
     309 00000cc0     85c0          move    *a14,a0         ;MAP_W
     310 00000cd0     4001          add     a0,a1
     311 00000ce0     e461          cmpxy   a3,a1
     312 00000cf0                   JRXLT   lwxtsclp1               ;Block X+W < TL X ? (not in range)
     313                    
     314 00000d00     b4e1          move    *a7(MAP_Y),a1
         00000d10     0020  
     315 00000d20     2601          sll     16,a1
     316 00000d30     e481          cmpxy   a4,a1
     317 00000d40                   JRYGE   lwxtsclp1               ;Block Y >= BR Y ?
     318                    
     319 00000d50     b5c0          move    *a14(MAP_H),a0
         00000d60     0010  
     320 00000d70     2600          sll     16,a0
     321 00000d80     4001          add     a0,a1
     322 00000d90     e461          cmpxy   a3,a1
     323 00000da0                   JRYLT   lwxtsclp1               ;Block Y+H < TL Y ?
     324                    
     325 00000db0     0d3f          callr   bgnd_addblk
         00000dc0     0025  
     326 00000dd0     c9dc          jrnc    lwxtsclp1
     327                    
     328 00000de0     c020          jruc    lwxtx           ;No more blocks!
     329                    
     330                    
     331                    
     332 00000df0           lwxtsclp2
     333 00000df0     1028          addk    1,a8
     334 00000e00     40c7          add     a6,a7           ;Next block
     335 00000e10     4847          cmp     a2,a7
     336 00000e20     c51c          jrge    lwxtx           ;End?
     337                    
     338 00000e30     8f00          movb    *a8,a0          ;Check bakbit
     339 00000e40     cefa          jrn     lwxtsclp2               ;Already displayed?
     340                    
     341 00000e50           lwxtqscanstrt
     342 00000e50     b4e1          move    *a7(MAP_Y),a1
         00000e60     0020  
     343 00000e70     2601          sll     16,a1
     344 00000e80     e481          cmpxy   a4,a1
     345 00000e90                   JRYGE   lwxtsclp2               ;Block Y >= BR Y ?
     346                    
     347 00000ea0     b4ee          move    *a7(MAP_HDR),a14
         00000eb0     0030  
     348 00000ec0     268e          sll     32-12,a14       ;Bits 0-11 are hdr offset
     349 00000ed0     2e0e          srl     32-12-4,a14     ;*16
     350 00000ee0     4dc0          move    a14,a0          ;>*5
     351 00000ef0     2440          sll     2,a0
     352 00000f00     400e          add     a0,a14
     353 00000f10     40ae          add     a5,a14          ;A14=*Img hdr
     354                    
     355 00000f20     b5c0          move    *a14(MAP_H),a0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    8

         00000f30     0010  
     356 00000f40     2600          sll     16,a0
     357 00000f50     4001          add     a0,a1
     358 00000f60     e461          cmpxy   a3,a1
     359 00000f70                   JRYLT   lwxtsclp2               ;Block Y+H < TL Y ?
     360                    
     361 00000f80     b4e1          move    *a7(MAP_X),a1
         00000f90     0010  
     362 00000fa0     e481          cmpxy   a4,a1
     363 00000fb0                   JRXGE   lwxtx           ;BLOCK X > BR X ?
     364                    
     365 00000fc0     0d3f          callr   bgnd_addblk
         00000fd0     0004  
     366 00000fe0     c9e0          jrnc    lwxtsclp2
     367                    
     368                    
     369 00000ff0           lwxtx   PULL    a0,a6,a7
     370 00001010     0960          rets
     371                    
     372                    
     373                    
     374 00001020            SUBRP  bgnd_addblk
     375                    
     376 00001020                   PUSH    a0,a2,a3,a4
     377                    
     378                    
     379 00001040     0d5f          calla   GETOBJ
         00001050 00000000! 
     380 00001070     ca76          jrz     ptnkx
     381                    
     382 00001080     8f0e          movb    *a8,a14         ;set bit in bitmap for block on list
     383 00001090     0bae          ori     080H,a14
         000010a0 00000080  
     384 000010c0     8dc8          movb    a14,*a8
     385                    
     386 000010d0     b300          move    a8,*a0(OPLINK),L ;OPLINK = *Bakbit for obj
         000010e0     01a0  
     387                    
     388 000010f0     5621          clr     a1
     389 00001100     b020          move    a1,*a0(OID)
         00001110     0190  
     390 00001120     b020          move    a1,*a0(OFLAGS)
         00001130     00e0  
     391                    
     392 00001140     b6e1          move    *a7(MAP_X),a1,L ;A1=ypos:xpos of block from mod base
         00001150     0010  
     393 00001160     e121          addxy   a9,a1           ;+module base position
     394 00001170     b020          move    a1,*a0(OXPOS)
         00001180     0090  
     395 00001190     2e01          srl     16,a1
     396 000011a0     b020          move    a1,*a0(OYPOS)
         000011b0     00b0  
     397 000011c0     84e4          move    *a7,a4          ;A4=map_z,8:map_flags,4:map_pal,4
     398 000011d0     4c83          move    a4,a3
     399 000011e0     0523          zext    a3
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE    9

     400 000011f0     2f03          srl     8,a3
     401 00001200     b060          move    a3,*a0(OZPOS)
         00001210     00d0  
     402                    
     403 00001220     b4e1          move    *a7(MAP_HDR),a1
         00001230     0030  
     404 00001240     ec2e          movx    a1,a14
     405 00001250     260e          sll     32-16,a14
     406 00001260     2c8e          srl     32-4,a14
     407 00001270     252e          sll     4+5,a14         ;Bits 12-15 are bits 4-7 of pal index *32
     408                            
     409 00001280     2681          sll     32-12,a1        ;Bits 0-11 are hdr offset
     410 00001290     2e01          srl     32-12-4,a1      ;*16
     411 000012a0     4c23          move    a1,a3           ;>*5
     412 000012b0     2441          sll     2,a1
     413 000012c0     4061          add     a3,a1
     414                    
     415 000012d0     40a1          add     a5,a1           ;A1=*Img hdr
     416                    
     417 000012e0     4c83          move    a4,a3           ;A4=Map_z,8: map_flags,4: map_pal,4
     418 000012f0     2784          sll     32-4,a4         ;Last four bits for *pal
     419 00001300     2d24          srl     32-4-5,a4       ;*32
     420 00001310     41c4          add     a14,a4
     421 00001320     4144          add     a10,a4          ;+Pal_t base
     422 00001330     4c02          move    a0,a2           ;Save A0
     423 00001340     8680          move    *a4,a0,L        ;Get *PAL
     424 00001350     4c24          move    a1,a4
     425                            .if     NMBPAL
     426                            calla   pal_getb
     427                            .else
     428 00001360     0d5f          calla   pal_getf
         00001370 00000000! 
     429                            .endif
     430 00001390     cb01          jrnz    bsetpal         ;No PAL?
     431 000013a0     5600          clr     a0
     432 000013b0           bsetpal
     433 000013b0     0520          zext    a0
     434 000013c0     b202          move    a0,*a2(OPAL),L
         000013d0     0150  
     435 000013e0     4c40          move    a2,a0                   ;Restore A0
     436 000013f0     4c81          move    a4,a1                   ;^ A1
     437 00001400     b220          move    a1,*a0(OIMG),L          ;A1=Data block pointer
         00001410     0170  
     438                    
     439 00001420     b424          move    *a1(MAP_CTRL),a4        ;Get DMA ctrl
         00001430     0040  
     440 00001440     0ba4          ori     08002H,a4               ;A4=flags (08000H dma go, 2)
         00001450 00008002  
     441 00001470     2f83          srl     4,a3                    ;remove palette bits
     442 00001480     27c3          sll     32-2,a3
     443 00001490     c801          jrc     ptnktrans                       ;Transparent?
     444 000014a0     1024          addk    1,a4
     445 000014b0     2cc3  ptnktrans       srl     26,a3                   ;Line up flip bits
     446 000014c0     5464          or      a3,a4
     447                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   10

     448 000014d0     9622          move    *a1+,a2,L               ;ISIZE
     449 000014e0     8623          move    *a1,a3,L                ;Get SAG
     450 000014f0     0524          zext    a4                      ;Zero offset in A4
     451                    
     452 00001500     4c01          move    a0,a1
     453 00001510     0b01          addi    OSIZE+32,a1
         00001520     0150  
     454 00001530     0981          mmtm    a1,a2,a3,a4             ;Stuff OSIZE,OSAG,OFFSET,OCTRL
         00001540     3800  
     455                    
     456 00001550     b404          move    *a0(OZPOS),a4
         00001560     00d0  
     457 00001570     0be4          subi    80,a4                   ;> 80?
         00001580     ffaf  
     458 00001590     c41f          jrlt    ptnknormz                       ;Normal?
     459                    
     460                    
     461 000015a0     b080          move    a4,*a0(OZPOS)
         000015b0     00d0  
     462                    
     463 000015c0     0be4          subi    20,a4                   ;> 100?
         000015d0     ffeb  
     464 000015e0     c70e          jrgt    ptnkno_rel
     465 000015f0     b404          move    *a0(OFLAGS),a4
         00001600     00e0  
     466 00001610     0ba4          ori     M_SCRNREL,a4
         00001620 00002000  
     467 00001640     b080          move    a4,*a0(OFLAGS)
         00001650     00e0  
     468 00001660     b404          move    *a0(OYPOS),a4
         00001670     00b0  
     469 00001680     0b84          andi    0ffh,a4
         00001690 ffffff00  
     470 000016b0     b080          move    a4,*a0(OYPOS)
         000016c0     00b0  
     471 000016d0           ptnkno_rel
     472                    
     473 000016d0     5684          clr     a4
     474 000016e0     b280          move    a4,*a0(OXVEL),L
         000016f0     0020  
     475 00001700     b280          move    a4,*a0(OYVEL),L
         00001710     0040  
     476                    
     477 00001720     0d5f          calla   INSOBJ                  ;Put on objlst
         00001730 00000000! 
     478 00001750     0320          clrc
     479 00001760                   PULL    a0,a2,a3,a4
     480 00001780     0960          rets
     481                    
     482 00001790     0932  ptnknormz       call    b2                      ;Call insert routine
     483 000017a0     0320          clrc
     484 000017b0                   PULL    a0,a2,a3,a4
     485 000017d0     0960          rets
     486                    
     487 000017e0     0de0  ptnkx   setc                            ;failure to get object
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   11

     488 000017f0                   PULL    a0,a2,a3,a4
     489 00001810     0960          rets
     490                    
     491                    
     492                    
     493 00001820           z_t
     494 00001820 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     495 000018c0 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     496 00001960 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     497 00001a00 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     498 00001aa0 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     499 00001b40 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     500 00001be0 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     501 00001c80 00001d60'         .long   bak_null,bak_null,bak_null,bak_null,bak_null
     502 00001d20 00001d60'         .long   bak_null,bak_null
     503                    
     504                    
     505 00001d60           bak_null
     506                    
     507 00001d60     0960          rets
     508                    
     509                    
     510                    
     511                    
     512 00001d70            SUBR   bgnd_delnonvis
     513                    
     514 00001d70     4d09  mlaylp  move    a8,a9                   ;ptr to prev in a9
     515 00001d80     8708          move    *a8,a8,L                ;ptr to next in a8
     516 00001d90     ca25          jrz     mlayx                   ;End?
     517                    
     518 00001da0     b507  mlaylp2 MOVE    *A8(OXPOS),A7
         00001db0     0090  
     519 00001dc0     e4e4          CMPXY   A7,A4
     520 00001dd0                   JRXLT   DEL_IT                  ;JUMP IF BR X < BLOCK X
     521                    
     522 00001de0     b500          MOVE    *A8(OYPOS),A0
         00001df0     00b0  
     523 00001e00     2600          SLL     16,A0
     524 00001e10     e404          CMPXY   A0,A4
     525 00001e20                   JRYLT   DEL_IT                  ;JUMP IF BR Y < BLOCK Y
     526                    
     527 00001e30     b701          MOVE    *A8(OIMG),A1,L
         00001e40     0170  
     528 00001e50     8426          MOVE    *A1,A6                  ;A6 BLOCK WIDTH
     529 00001e60     40c7          ADD     A6,A7
     530 00001e70     e467          CMPXY   A3,A7
     531 00001e80                   JRXLT   DEL_IT                  ;JUMP IF TL X > BLOCK X+W
     532                    
     533 00001e90     b427          MOVE    *A1(MAP_H),A7           ;A7 BLOCK HEIGHT
         00001ea0     0010  
     534 00001eb0     2607          SLL     16,A7
     535 00001ec0     40e0          ADD     A7,A0
     536 00001ed0     e460          CMPXY   A3,A0
     537 00001ee0                   JRYGE   mlaylp                  ;JUMP IF TL Y <= BLOCK Y+H
     538                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:44:59 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

background handlers                                                  PAGE   12

     539 00001ef0           DEL_IT
     540 00001ef0     b700          move    *a8(OPLINK),a0,L        ;0CHlr the on display list bit
         00001f00     01a0  
     541 00001f10     8e07          movb    *a0,a7
     542 00001f20     2727          sll     32-7,a7
     543 00001f30     2ce7          srl     32-7,a7
     544 00001f40     8ce0          movb    a7,*a0
     545                    
     546 00001f50     8b09          move    *a8,*a9,L               ;Unlink
     547 00001f60     07a0          move    @OFREE,a0,L
         00001f70 00000000! 
     548 00001f90     8208          move    a0,*a8,L
     549 00001fa0     0788          move    a8,@OFREE,L             ;Put on free list
         00001fb0 00000000! 
     550 00001fd0     8728          move    *a9,a8,L                ;A8=*Next obj
     551 00001fe0     cbdb          jrnz    mlaylp2                 ;More?
     552                    
     553 00001ff0     0960  mlayx   rets
     554                    
     555                    
     556                    
     557                    
     558                    
     559                    
     560                            .end

 No Errors,  No Warnings
