TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

                                                                     PAGE    1

       1                            .file   "hstd.asm"
       3                            .width  132
       4                            .option b,d,l,t
       5                            .mnolist
       6                    
       7                            .include        "mproc.equ"
       8                            .include        "disp.equ"
       9                            .include        "sys.equ"
      10                            .include        "game.equ"
      11                            .include        "imgtbl.glo"
      12                            .include        "link.equ"
      13                            .include        "shawn.hdr"             ;Macros
      14                    
      15                    
      16 00000000                   .TEXT
      17                    
      18                    
      19                            .DEF    GET_HSCR
      20                            .DEF    RC_BYTEI
      21                            .DEF    RC_BYTE
      22                            .DEF    RC_WORD
      23                            .DEF    RC_LONG
      24                            .DEF    RC_LONGI
      25                            .DEF    WC_BYTE
      26                            .DEF    WC_BYTEI
      27                            .DEF    WC_WORD
      28                            .DEF    WC_WORDI
      29                            .DEF    WC_LONG
      30                            .DEF    WC_LONGI
      31                            .DEF    PT_ENTRY
      32                            .DEF    INIT_TB
      33                            .DEF    INIT_TAB        ;GEORGES POWER UP ENTRY
      34                            .DEF    P_FORK
      35                            .DEF    VAL_TAB
      36                            .DEF    ROM_PTRS
      37                    
      38                    
      39                            .DEF    ISHSTD,GETINIT,GETINIT1,GETINIT2,INITTIM
      40                            .DEF    SET_PAGE
      41                            .DEF    A2_CHECK
      42                            .DEF    DEC_HSR,INIT_HSR,GET_HSC
      43                            .DEF    GETHIGH 
      44                            .def    INITMAT
      45                    
      46                    
      47                            .REF    RD15FONT,SYSCOPY,P1DATA,P2DATA
      48                            .REF    BINBCD,FON150
      49                    
      50                    
      51                    
      52                             .REF   DEF_PAGE,GET_ADJ
      53                    
      54                    
      55 00000000                    .TEXT
      56                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    2

      57                    
      58 00000000     f3fe  BEEPSND  .WORD  0F3FEH,010H,080A2H,0            ;LOW BEEP
      59                    
      60                    
      61                    
      62                     .if 0  
      63                    ALL_TAB
      64                            .LONG   ALL_TIME_ORIGIN         ;LOCATION OF TABLE
      65                            .WORD   ALL_TIME_ENTRIES-1      ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
      66                            .WORD   ALL_TIME_VISIBLE        ;# VISIBLE (SHOW 20 ALL TIME)
      67                            .WORD   ALL_TIME_SELECT         ;BITS TO SELECT IT
      68                            .LONG   ALL_TIME_ROM_TABLE      ;ROM IMAGE OF TABLE
      69                            .WORD   ALL_TIME_ENTRIES/5      ;RESET TABLE IF 1/5 OR MORE BAD
      70                    
      71                    TOD_TAB
      72                            .LONG   TODAYS_ORIGIN           ;LOCATION OF TABLE
      73                            .WORD   TODAYS_ENTRIES-1        ;NUMBER IN THE TABLE (DON'T COUNT ZERO FILLER)
      74                            .WORD   TODAYS_VISIBLE          ;# VISIBLE (SHOW 20 ALL TIME)
      75                            .WORD   TODAYS_SELECT           ;BITS TO SELECT IT
      76                            .LONG   TODAYS_ROM_TABLE        ;ROM IMAGE OF TABLE
      77                            .WORD   TODAYS_ENTRIES/5        ;RESET TABLE IF 1/5 OR MORE BAD
      78                     .endif
      79                    
      80 00000040           P_FORK
      81 00000040     098f          MMTM    SP,A1
         00000050     4000  
      82 00000060     b5a1          MOVE    *A13(PROCID),A1         ;PASS OUR ID TO FORKED PROCESS
         00000070     0020  
      83 00000080     0d5f          CALLA   GETPRC                  ;MAKE THE PROCESS
         00000090 00000000! 
      84 000000b0     09af          MMFM    SP,A1
         000000c0     0002  
      85 000000d0     0960          RETS
      86                    
      87 000000e0           DEC_HSR
      88 000000e0     098f          MMTM    SP,A0
         000000f0     8000  
      89 00000100     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         00000110     0033  
      90 00000120     ca03          JRZ     DECHX           ;ITS ZERO....NO ACTION.
      91 00000130     1420          DEC     A0              ;REMOVE A TICK
      92 00000140     0d3f          CALLR   PUT_HSC         ;PUT IT BACK JAK
         00000150     001d  
      93 00000160     09af  DECHX   MMFM    SP,A0
         00000170     0001  
      94 00000180     0960          RETS
      95                    
      96              02ee  HS_MIN   EQU     750             ;ALWAYS 750 PLAYS BEFORE REMOVING A FRESH
      97 00000190           DELAY_HSRESET:
      98 00000190     098f          MMTM    SP,A0
         000001a0     8000  
      99 000001b0     0d3f          CALLR   GET_HSC         ;THIS IS EASY...GET THE COUNTER
         000001c0     0028  
     100 000001d0     0b40          CMPI    HS_MIN,A0       ;IS IT TOO LOW
         000001e0     fd11  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    3

     101 000001f0     c904          JRHS    DHX             ;NOPE...NO ACTION
     102                    
     103 00000200     09c0          MOVI    HS_MIN,A0       ;STOP THE RESET!
         00000210     02ee  
     104 00000220     0d3f          CALLR   PUT_HSC         ;THIS MANY PLAYS TILL RESET!
         00000230     000f  
     105 00000240           DHX:    
     106 00000240     09af          MMFM    SP,A0
         00000250     0001  
     107 00000260     0960          RETS
     108                            
     109 00000270           INIT_HSR
     110 00000270     098f          MMTM    SP,A0
         00000280     8000  
     111 00000290     09c0          MOVI    ADJHSRES,A0
         000002a0     000e  
     112 000002b0     0d5f          CALLA   GET_ADJ         ;GET THE ADJUSTED VALUE
         000002c0 00000000! 
     113 000002e0     0d3f          CALLR   PUT_HSC         ;SET IT TO THIS VALUE
         000002f0     0003  
     114 00000300     09af          MMFM    SP,A0
         00000310     0001  
     115 00000320     0960          RETS
     116                    
     117 00000330           PUT_HSC
     118 00000330     098f          MMTM    SP,A7,A0
         00000340     8100  
     119 00000350     0d3f          CALLR   HSR_PAGE                ;HIGH SCORE PAGE
         00000360     002b  
     120                    
     121 00000370     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         00000380 01402580  
     122 000003a0     0d3f          CALLR   WC_LONGI                ;WRITE OUR PARAMETER
         000003b0     03b2  
     123 000003c0     03e0          NOT     A0                      ;NEGATE IT.
     124 000003d0     0d3f          CALLR   WC_LONG                 ;AND WRITE IN SUBSEQUENT SPOT.
         000003e0     03a3  
     125 000003f0     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE
         00000400 00000000! 
     126 00000420     09af          MMFM    SP,A7,A0                ;AND RETURN
         00000430     0081  
     127 00000440     0960          RETS
     128                    
     129 00000450           GET_HSC
     130 00000450     098f          MMTM    SP,A7,A1
         00000460     4100  
     131 00000470     0d3f          CALLR   HSR_PAGE                ;POINT PAGE AT HSR
         00000480     0019  
     132                    
     133 00000490     09e7          MOVI    HRESET_COUNTER,A7       ;POINT AT
         000004a0 01402580  
     134 000004c0     0d3f          CALLR   RC_LONGI                ;READ THE VALUE
         000004d0     0378  
     135 000004e0     4c01          MOVE    A0,A1                   ;STASH IT
     136 000004f0     0d3f          CALLR   RC_LONG                 ;READ VERIFIER
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    4

         00000500     0363  
     137 00000510     03e0          NOT     A0                      ;SEE IF ITS VALID
     138 00000520     4801          CMP     A0,A1
     139 00000530     ca07          JRZ     GET_HSCX                ;IT IS....RETURN IT.
     140                    
     141 00000540     0d3f          CALLR   INIT_HSR                ;REFRESH IT WITH FACTORY VALUE
         00000550     ffd1  
     142 00000560     09c0          MOVI    ADJHSRES,A0
         00000570     000e  
     143 00000580     0d5f          CALLA   GET_ADJ                 ;GET THE ADJUSTED VALUE
         00000590 00000000! 
     144                    
     145 000005b0           GET_HSCX
     146 000005b0     0d5f          CALLA   DEF_PAGE                ;FLIP PAGE AWAY FROM US
         000005c0 00000000! 
     147 000005e0     4c00          MOVE    A0,A0                   ;SET Z FLAG BASED ON COUNTER
     148 000005f0     09af          MMFM    SP,A7,A1
         00000600     0082  
     149 00000610     0960          RETS
     150                    
     151 00000620           HSR_PAGE
     152 00000620     098f          MMTM    SP,A1
         00000630     4000  
     153 00000640     09c1          MOVI    HSR_SELECT,A1
         00000650     0000  
     154 00000660     0d3f          CALLR   SET_PAGE
         00000670     024a  
     155 00000680     09af          MMFM    SP,A1
         00000690     0002  
     156 000006a0     0960          RETS
     157                    
     158 000006b0           GETHIGH
     159                     .if 0
     160                            movi    ALL_TIME_SELECT,a1
     161                            callr   SET_PAGE
     162                    
     163                            movi    [62,27],a10                             ;Screen start address
     164                            movi    ALL_TIME_ORIGIN+HS_INITS+HS_SIZE,a8     ;Table start address
     165                            JSRP    HSINITDSP
     166                    
     167                            movi    [62,63],a10
     168                            movi    ALL_TIME_ORIGIN+HS_SCORE+HS_SIZE,a8
     169                            JSRP    HSNUMDSP
     170                    
     171                            movi    TODAYS_SELECT,a1
     172                            CALLR   SET_PAGE
     173                    
     174                            movi    [62,227],a10
     175                            movi    TODAYS_ORIGIN+HS_INITS+HS_SIZE,a8
     176                            JSRP    HSINITDSP
     177                    
     178                            movi    [62,263],a10
     179                            movi    TODAYS_ORIGIN+HS_SCORE+HS_SIZE,a8
     180                            JSRP    HSNUMDSP
     181                     .endif
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    5

     182 000006b0                   RETP
     183                    
     184                    
     185                    
     186 000006e0           HSNUMDSP
     187 000006e0     194b          movk    10,a11                  ;# scores
     188 000006f0     09e9          movi    01010101H,a9            ;Start color 1, pal 1
         00000700 01010101  
     189                    
     190 00000720     4d07  hsn10   move    a8,a7
     191 00000730     0d3f          callr   RC_LONG                 ;GET THE SCORE=A0
         00000740     033f  
     192 00000750     4ce8          move    a7,a8
     193 00000760     4d43          move    a10,a3                  ;Dest Y:X
     194 00000770     56c6          clr     a6                      ;Blanking ON
     195 00000780     a38f          move    a12,-*sp,L
     196 00000790     190c          movk    8,a12
     197 000007a0     0d3f          callr   HSNUML0
         000007b0     000e  
     198 000007c0     97ec          move    *sp+,a12,L
     199 000007d0                   SLEEPK  1
     200 00000810     0b08          addi    HS_SIZE,a8
         00000820     0080  
     201 00000830     0b2a          addi    0120000H,a10            ;Next line
         00000840 00120000  
     202 00000860     3eab          dsj     a11,hsn10
     203                    
     204 00000870                   RETP
     205                    
     206                    
     207 000008a0           HSNUML0
     208 000008a0     098f          mmtm    sp,a2,a3,a4,a5,a7,a8,a10,a11
         000008b0     3db0  
     209                    
     210 000008c0     4c0b          move    a0,a11
     211 000008d0     2e80          srl     4*3,a0
     212 000008e0     ca01          jrz     hsnlp                   ;No comma?
     213 000008f0     14c3          subk    6,a3                    ;-X
     214                    
     215 00000900     4d61  hsnlp   move    a11,a1
     216 00000910     2c81          srl     28,a1                   ;Next digit value into lowest 4 bits
     217 00000920     cb02          jrnz    hsn5
     218 00000930     4cc6          move    a6,a6
     219 00000940     ca26          jrz     hsn50                   ;Skip digit if blanking
     220                    
     221 00000950     0b4c  hsn5    cmpi    3,a12
         00000960     fffc  
     222 00000970     cb10          jrnz    hsn13
     223 00000980     4cc6          move    a6,a6
     224 00000990     ca0e          jrz     hsn13                   ;1st non zero?
     225 000009a0     a02f          move    a1,-*sp
     226 000009b0     09e1          movi    RD15FONT+11*32,a1       ;Comma
         000009c0 00000160! 
     227 000009e0     8621          move    *a1,a1,L
     228 000009f0     4c6a          move    a3,a10
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    6

     229 00000a00     0b23          addi    0b0000H,a3              ;+Y
         00000a10 000b0000  
     230 00000a30     0d3f          callr   font_dma
         00000a40     002a  
     231 00000a50     4d43          move    a10,a3
     232 00000a60     10c3          addk    6,a3                    ;+X
     233 00000a70     95e1          move    *sp+,a1
     234                    
     235 00000a80     0b41  hsn13   cmpi    9,a1
         00000a90     fff6  
     236 00000aa0     c201          jrls    hsn15                   ;Digit ok?
     237 00000ab0     1921          movk    9,a1                    ;Output 9 on an error
     238                    
     239 00000ac0     1826  hsn15   movk    1,a6                    ;Blanks off
     240 00000ad0     4c6a          move    a3,a10
     241 00000ae0     0b41          cmpi    1,a1
         00000af0     fffe  
     242 00000b00     cb01          jrnz    hsn30
     243 00000b10     1063          addk    3,a3                    ;Offset 1's X
     244 00000b20     09c0  hsn30   movi    32*4+16,a0
         00000b30     0090  
     245 00000b40     5e01          mpyu    a0,a1                   ;*Header size
     246 00000b50     0b21          addi    FON150,a1               ;Base address of image header
         00000b60 00000000! 
     247 00000b80     0d3f          callr   font_dma
         00000b90     0015  
     248 00000ba0     4d43          move    a10,a3
     249                    
     250 00000bb0     11c3  hsn50   addk    14,a3                   ;step to next
     251 00000bc0     248b          sll     4,a11                   ;next digit
     252 00000bd0     0d8c          dsj     a12,hsnlp
         00000be0     ffd1  
     253                    
     254 00000bf0     0b29          addi    0f0f0000H,a9
         00000c00 0f0f0000  
     255 00000c20     0b69          cmpi    030300000H,a9
         00000c30 cfcfffff  
     256 00000c50     c206          jrls    hsnx
     257 00000c60     0b09          addi    0101H,a9                        ;Next PAL
         00000c70     0101  
     258 00000c80     0529          zext    a9
     259 00000c90     0b29          addi    01010000H,a9            ;Color 1
         00000ca0 01010000  
     260                    
     261 00000cc0     09af  hsnx    mmfm    sp,a2,a3,a4,a5,a7,a8,a10,a11
         00000cd0     0dbc  
     262 00000ce0     0960          rets
     263                    
     264                    
     265                    
     266 00000cf0           font_dma
     267 00000cf0     b624          move    *a1(ISAG),a4,L
         00000d00     0040  
     268 00000d10     b425          move    *a1(ICTRL),a5
         00000d20     0060  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    7

     269 00000d30     9422          move    *a1+,a2                 ;Get X size
     270 00000d40     4ca7          move    a5,a7
     271 00000d50     2627          sll     32-15,a7                ;Get bits 12-14
     272 00000d60     2c67          srl     32-15+12,a7
     273 00000d70     5e47          mpyu    a2,a7
     274                    
     275 00000d80     0b22          addi    010000H,a2              ;Y Size 1
         00000d90 00010000  
     276 00000db0     9428          move    *a1+,a8                 ;Get Y size
     277                    
     278 00000dc0     0ba5          ori     DMACNZ,a5
         00000dd0 00008008  
     279 00000df0     4d21          move    a9,a1
     280 00000e00     0d5f  fdlp    calla   QDMAN
         00000e10 00000000! 
     281 00000e30     0b21          addi    01010000H,a1            ;Next color
         00000e40 01010000  
     282 00000e60     40e4          add     a7,a4                   ;Set SAG for next line
     283 00000e70     0b23          addi    010000H,a3              ;Y+1
         00000e80 00010000  
     284 00000ea0     3d68          dsj     a8,fdlp
     285                    
     286 00000eb0     0960          rets
     287                    
     288                    
     289                    
     290 00000ec0           HSINITDSP
     291 00000ec0     194b          movk    10,a11                  ;10 Scores
     292                    
     293 00000ed0     4d07  hsid10  move    a8,a7
     294 00000ee0     0be7          subi    HS_INITS,a7
         00000ef0     ffbf  
     295 00000f00     0d3f          callr   RC_LONG                 ;Get the score in a0
         00000f10     02c2  
     296 00000f20     4c02          move    a0,a2
     297 00000f30     0b07          addi    HS_INITS,a7
         00000f40     0040  
     298 00000f50     4d43          move    a10,a3                  ;Y:X
     299                    
     300 00000f60     09e1          movi    001010101H,a1           ;Flash if inits match score
         00000f70 01010101  
     301 00000f90     0d3f          callr   A2_CHECK
         00000fa0     00ed  
     302 00000fb0     ca03          jrz     hsid30
     303 00000fc0     09e1          movi    01f1f0303H,a1           ;Color:pal
         00000fd0 1f1f0303  
     304                    
     305 00000ff0     a38f  hsid30  move    a12,-*sp,L
     306 00001000     186c          movk    3,a12
     307                    
     308 00001010     0d3f  hsid50  callr   RC_BYTE                 ;Get initial
         00001020     026f  
     309 00001030     1207          addk    16,a7                   ;Step to next initial
     310 00001040     0d3f          callr   initout                 ;Output initial
         00001050     0011  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    8

     311 00001060     3ccc          dsj     a12,hsid50
     312                    
     313 00001070     97ec          move    *sp+,a12,L
     314 00001080     0b2a          addi    0120000H,a10            ;Next Y
         00001090 00120000  
     315 000010b0     4ce8          move    a7,a8
     316 000010c0                   SLEEPK  1
     317 00001100     0b08          addi    HS_SIZE-48,a8           ;Get next guy in cmos
         00001110     0050  
     318 00001120     0d8b          dsj     a11,hsid10
         00001130     ffd9  
     319                    
     320 00001140                   RETP
     321                    
     322                    
     323 00001170           initout
     324 00001170     098f          mmtm    sp,a1,a2,a4,a5,a7,a8,a9,a10,a11,a14
         00001180     6df2  
     325                    
     326 00001190     0be0          subi    021H,a0                 ;Start of table
         000011a0     ffde  
     327 000011b0     0b40          cmpi    07dH-021H,a0
         000011c0     ffa3  
     328 000011d0     c32c          jrhi    inox
     329                    
     330 000011e0     24a0          sll     5,a0
     331 000011f0     0b20          addi    RD15FONT,a0
         00001200 00000000! 
     332 00001220     8600          move    *a0,a0,L                ;Get pointer
     333 00001230     b604          move    *a0(ISAG),a4,L
         00001240     0040  
     334 00001250     b405          move    *a0(ICTRL),a5
         00001260     0060  
     335 00001270     9402          move    *a0+,a2                 ;Get X size
     336                    
     337 00001280     4ca7          move    a5,a7
     338 00001290     2627          sll     32-15,a7                ;Get bits 12-14
     339 000012a0     2c67          srl     32-15+12,a7
     340 000012b0     5e47          mpyu    a2,a7
     341                    
     342                    
     343 000012c0     1989          movk    12,a9
     344 000012d0     4449          sub     a2,a9
     345 000012e0     2be9          sra     1,a9                    ;/2
     346 000012f0     4123          add     a9,a3                   ;Add X offset so letter centered
     347                    
     348 00001300     0b22          addi    010000H,a2              ;Y Size 1
         00001310 00010000  
     349 00001330     9408          move    *a0+,a8                 ;Get Y size
     350 00001340     576b          clr     a11                     ;A11=Line cnt
     351                    
     352 00001350     4c6a          move    a3,a10
     353 00001360     0ba5          ori     DMACNZ,a5
         00001370 00008008  
     354 00001390     0d5f  inolp   calla   QDMAN
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE    9

         000013a0 00000000! 
     355 000013c0     102b          addk    1,a11
     356 000013d0     0b4b          cmpi    15,a11
         000013e0     fff0  
     357 000013f0     c503          jrge    ino50                   ;Out of colors?
     358 00001400     0b21          addi    01010000H,a1            ;Next color
         00001410 01010000  
     359 00001430     40e4  ino50   add     a7,a4                   ;Set SAG for next line
     360 00001440     0b23          addi    010000H,a3              ;Y+1
         00001450 00010000  
     361 00001470     3de8          dsj     a8,inolp
     362                    
     363 00001480     4d43          move    a10,a3
     364 00001490     4523          sub     a9,a3
     365 000014a0     1223  inox    addk    17,a3
     366                    
     367 000014b0     09af          mmfm    sp,a1,a2,a4,a5,a7,a8,a9,a10,a11,a14
         000014c0     4fb6  
     368 000014d0     0960          rets
     369                    
     370                    
     371 000014e0           INITOUT
     372 000014e0                   PUSH    a2,a4,a5,a14
     373                    
     374 00001500     0be0          subi    021H,a0                 ;Start of table
         00001510     ffde  
     375 00001520     0b40          cmpi    07dH-021H,a0
         00001530     ffa3  
     376 00001540     c318          jrhi    initerr
     377                    
     378 00001550     24a0          sll     5,a0
     379 00001560     0b20          addi    RD15FONT,a0
         00001570 00000000! 
     380 00001590     8600          move    *a0,a0,L                ;Get pointer
     381 000015a0     8602          move    *a0,a2,L                ;Get size
     382 000015b0     1984          movk    12,a4
     383 000015c0     e244          subxy   a2,a4
     384 000015d0     0504          sext    a4
     385 000015e0     2be4          sra     1,a4                    ;/2
     386 000015f0     4083          add     a4,a3                   ;Add X offset so letter centered
     387 00001600     a08f          move    a4,-*sp
     388 00001610     b604          move    *a0(ISAG),a4,L
         00001620     0040  
     389 00001630     b405          move    *a0(ICTRL),a5
         00001640     0060  
     390 00001650     0ba5          ori     DMACNZ,a5
         00001660 00008008  
     391 00001680     0d5f          calla   QDMAN
         00001690 00000000! 
     392 000016b0     95e0          move    *sp+,a0
     393 000016c0     4403          sub     a0,a3
     394 000016d0     1223  initerr addk    17,a3
     395                    
     396 000016e0                   PULL    a2,a4,a5,a14
     397 00001700     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   10

     398                    
     399                    
     400                    
     401 00001710           ISHSTD
     402                    
     403                     .if 0
     404                            MMTM    SP,A8,A10
     405                            MOVK    1,A0
     406                            MOVE    @P1DATA,A8,L            ;FIX!
     407                            MOVE    @P2DATA,A10,L
     408                    
     409                            CALLR   CHECK_ALL_TIME
     410                            JRNZ    ISHSTD1
     411                    
     412                            CALLR   CHECK_TODAY
     413                            JRNZ    ISHSTD1
     414                            CLR     A0
     415                    ISHSTD1 
     416                            SWAP    A8,A10
     417                            ADDK    2,A0
     418                            CALLR   CHECK_ALL_TIME
     419                            JRNZ    VERY_HIGH
     420                    
     421                            CALLR   CHECK_TODAY
     422                            JRNZ    VERY_HIGH
     423                            SUBK    2,A0
     424                    VERY_HIGH
     425                            MMFM    SP,A8,A10
     426                            RETS
     427                    
     428                    CHECK_ALL_TIME
     429                            MMTM    SP,A0,A2,A8
     430                            MOVE    A8,A0
     431                            MOVE    A10,A2                          ;SHOW "OTHER" SCORE IN A2
     432                            MOVI    ALL_TAB,A8
     433                            CALLR   CHECK_SCORE             
     434                            MMFM    SP,A0,A2,A8
     435                            RETS
     436                    
     437                    CHECK_TODAY
     438                            MMTM    SP,A0,A2,A8             
     439                            MOVE    A10,A2                          ;SHOW "OTHER" SCORE IN A2
     440                            MOVE    A8,A0
     441                            MOVI    TOD_TAB,A8
     442                            CALLR   CHECK_SCORE             
     443                            MMFM    SP,A0,A2,A8             
     444                            RETS
     445                     .endif
     446                    
     447                    
     448 00000000                   .BSS    INITTIMR,16
     449 00000010                   .BSS    GET1FLG,16
     450 00000020                   .BSS    GET2FLG,16
     451                    
     452 00001710           INITTIM
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   11

     453 00001710     5600          CLR     A0
     454 00001720     0580          MOVE    A0,@GET1FLG
         00001730 00000010- 
     455 00001750     0580          MOVE    A0,@GET2FLG
         00001760 00000020- 
     456 00001780                   CREATE  HISC_PID,INTIML
     457 00001800     09c1          MOVI    30,A1
         00001810     001e  
     458 00001820     0581          MOVE    A1,@INITTIMR
         00001830 00000000- 
     459 00001850     b220          MOVE    A1,*A0(PA10),L          ;SET A10 TO 60
         00001860     0080  
     460 00001870     0960          RETS
     461                    
     462 00001880           INTIML
     463 00001880     05a0          MOVE    @INITTIMR,A0
         00001890 00000000- 
     464 000018b0     142a          DEC     A10
     465 000018c0     cb07          JRNE    INTIML1
     466 000018d0     09ca          MOVI    60,A10
         000018e0     003c  
     467 000018f0     1420          DEC     A0
     468 00001900     ce1a          JRN     INITTIMX
     469 00001910     0580          MOVE    A0,@INITTIMR
         00001920 00000000- 
     470                    
     471 00001940     0d5f  INTIML1 CALLA   BINBCD
         00001950 00000000! 
     472 00001970     09e3          MOVI    [19,194],A3
         00001980 001300c2  
     473 000019a0     a38f          MOVE    A12,-*SP,L
     474 000019b0     184c          MOVK    2,A12
     475 000019c0     1826          MOVK    1,A6
     476 000019d0     2700          SLL     24,A0                   ;SHIFT DIGITS INTO PLACE
     477 000019e0     09e9          movi    01010101H,a9
         000019f0 01010101  
     478 00001a10     0d3f          callr   HSNUML0
         00001a20     fee7  
     479 00001a30     97ec          MOVE    *SP+,A12,L
     480 00001a40                   SLOOP   1,INTIML
     481 00001ab0           INITTIMX
     482 00001ab0                   DIE
     483                    
     484                    
     485 00001ae0           GETINIT
     486 00001ae0                   SLEEPK  10
     487 00001b20     0d3f          CALLR   DONCK
         00001b30     0009  
     488 00001b40     cbf9          JRNE    GETINIT
     489 00001b50           GETINITX
     490 00001b50                   SLEEP   60              ;WAIT A SEC. THEN BOOK
     491 00001ba0                   RETP
     492                    
     493                    
     494 00001bd0           DONCK
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   12

     495 00001bd0     05a2          MOVE    @INITTIMR,A2
         00001be0 00000000- 
     496 00001c00     ca07          JREQ    DONCKX
     497 00001c10     05a0          MOVE    @GET1FLG,A0
         00001c20 00000010- 
     498 00001c40     05a1          MOVE    @GET2FLG,A1
         00001c50 00000020- 
     499 00001c70     4001          ADD     A0,A1
     500 00001c80     0960  DONCKX  RETS
     501                    
     502                    
     503 00001c90           GETINIT1
     504                    
     505                    
     506 00001c90           GETINIT2
     507                    
     508                    
     509                     .if 0
     510                    GTINIT
     511                            MOVE    A13,A8
     512                            ADDI    PDATA,A8
     513                            MOVE    *A0+,A1,L       
     514                            MOVE    *A1+,*A8+,L     ;PUT THE SCORE
     515                            MOVK    8,A1
     516                    
     517                    GTI0L   MOVE    *A0+,A3,L
     518                            MOVE    A3,*A8+,L
     519                            DSJS    A1,GTI0L
     520                            MOVK    1,A1
     521                            MOVE    A1,*A3,W        ;INCREMENT DONE FLAG
     522                            CLR     A11             ;CURRENT INITIAL WORKING ON
     523                            CLR     A10             ;JOYSTICK DEBOUNCE TIMER
     524                            CLR     A9              ;FIRE/START DEBOUNCE
     525                    
     526                    
     527                            CLR     A0                      ;A0=OXVAL
     528                            CLR     A1                      ;A1=OYVAL
     529                            MOVI    9EH,A3                  ;(OZPOS)
     530                            MOVI    DMAWNZ,A4               ;(OFLAGS) NON-ZERO VALUE
     531                            clr     a5                      ;(OID)
     532                            CLR     A6                      ;(OXVEL)
     533                            CLR     A7                      ;(OYVEL)
     534                            CALLA   BEGINOBJ
     535                    
     536                    GTL     CMPI    3,A11                   ;GET MOVE SWITCHES
     537                            JRHS    GTL4                            ;ENTERED 'EM ALL 
     538                    
     539                            CALLR   DONCK
     540                            JRNE    GTL0
     541                            
     542                            MOVI    3,A11                           ;TIMES UP STUFF EM IN
     543                            JRUC    GTL3X
     544                    GTL0    MOVE    *A13(PDATA+060H),A0,L           ;GET MOVE SWITCH ADDRESS
     545                            MOVE    *A0,A1,W
     546                            NOT     A1
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   13

     547                            SLL     28,A1
     548                            SRL     28,A1
     549                            JRNE    GTL1
     550                            CLR     A10                             ;CLEAR DEBOUNCE TIMER
     551                            JRUC    GTL5
     552                    GTL1    MOVE    A10,A10
     553                            JRNE    GTL5
     554                            MOVK    12,A10
     555                            SLL     4,A1
     556                            ADDI    IJOYTAB,A1
     557                            MOVB    *A1,A0                          ;GET DX
     558                            MOVB    *A1(8),A1                       ;GET DY
     559                            MOVE    *A13(PDATA+040H),A2             ;GET X COORD
     560                            MOVE    *A13(PDATA+050H),A3             ;GET Y COORD
     561                            ADD     A2,A0                           ;ADD DX, CHECK LIMITS
     562                            JRNN    GM1
     563                            CLR     A0
     564                    GM1     CMPI    5,A0
     565                            JRLS    GM2
     566                            MOVK    5,A0
     567                    GM2     ADD     A3,A1                           ;ADD DY CHECK LIMITS
     568                            JRNN    GM3
     569                            CLR     A1
     570                    GM3     CMPI    4,A1
     571                            JRLS    GM4
     572                            MOVK    4,A1
     573                    GM4     MOVE    A0,*A13(PDATA+040H)             ;SAVE COORDS
     574                            MOVE    A1,*A13(PDATA+050H)
     575                    
     576                    
     577                    GTL5    MOVE    *A13(PDATA+040H),A0             ;Get X
     578                            MOVE    *A13(PDATA+050H),A1             ;Get Y
     579                            movk    21,a3
     580                            movk    22,a5
     581                            MPYU    A0,A3                           ;FORM X OFFSET
     582                            MPYU    A1,A5                           ;FORM Y OFFSET
     583                            move    @WORLDTLX+16,a2
     584                            add     a2,a3
     585                            addi    137,a3
     586                            move    @WORLDTLY+16,a2
     587                            add     a2,a5
     588                            addi    41,a5
     589                            MOVE    A3,*A8(OXPOS)                   ;UPDATE POSITION
     590                            MOVE    A5,*A8(OYPOS)
     591                    
     592                            MOVK    6,A3
     593                            MPYU    A1,A3
     594                            ADD     A0,A3                           ;THIS IS THE INDEX TO MATRIX
     595                            SLL     3,A3
     596                            ADDI    INITMAT,A3
     597                            MOVB    *A3,A0
     598                            MOVE    A11,A4
     599                            SLL     3,A4
     600                            ADD     A13,A4
     601                            ADDI    PDATA+020H,A4
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   14

     602                            MOVB    A0,*A4                          ;STORE OUT CURRENT INITIAL
     603                    
     604                            MOVE    *A13(PDATA+0A0H),A1,L   
     605                            MOVE    *A1,A1,W
     606                            NOT     A1
     607                            SLL     31,A1
     608                            JRNE    GTL3
     609                            CLR     A9                              ;CLEAR DEBOUNCE TIMER
     610                            JRUC    GTL4
     611                    GTL3
     612                            MOVE    A9,A9                           ;DEBOUNCE STILL ON
     613                            JRNE    GTL4
     614                            MOVI    120,A9
     615                    
     616                            MOVB    *A4,A0                          ;CHECK FOR RUB DUDES...
     617                            CMPI    03CH,A0
     618                            JRNE    GTL3A                           ;NO....
     619                            DEC     A11
     620                            JRNN    GTL30
     621                            CLR     A11                             ;CAN'T RUB FIRST CHAR
     622                            JRUC    GTL4
     623                    GTL30
     624                            MOVI    BEEPSND,A0
     625                            CALLA   snd_play1
     626                            MOVK    020H,A0
     627                            MOVB    A0,*A4                          ;THROW OUT A SPACE
     628                            JRUC    GTL4
     629                    GTL3A
     630                            MOVI    BEEPSND,A0
     631                            CALLA   snd_play1
     632                            INC     A11
     633                            CMPI    3,A11
     634                            JRLO    GTL4
     635                    GTL3X
     636                            CALLA   DELOBJA8
     637                            MOVE    *A13(PDATA+0100H),A0,L
     638                            CLR     A1
     639                            MOVE    A1,*A0                          ;CLEAR DONE FLAG
     640                            CALLR   GTX                             ;UPDATE TABLE ENTRY
     641                    
     642                    GTL4
     643                            MOVE    A13,A2                          ;GET INITIAL STORE ADDRESS
     644                    
     645                            ADDI    PDATA+020H,A2
     646                            MOVK    3,A1                            ;DO THREE INITIALS
     647                            MOVE    *A13(PDATA+0C0H),A3,L           ;GET BASE SCREEN ADDRESS
     648                    GTL5L
     649                            MOVB    *A2,A0
     650                            MMTM    SP,A1,A2,A3
     651                            MOVE    *A13(PDATA+0E0H),A1,L           ;GET COLOR:PALETTE
     652                            CALLR   INITOUT
     653                            MMFM    SP,A1,A2,A3
     654                            ADDK    016H,A3                         ;INC SCREEN COORD
     655                            ADDK    8,A2                            ;INC DISPLAY ADDRESS
     656                            DSJS    A1,GTL5L
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   15

     657                            MOVE    A10,A10                         ;DEC TIMER ?
     658                            JREQ    GTL6                            ;NO, ALREADY ZERO
     659                            DEC     A10                             ;DEC IT
     660                    GTL6
     661                            MOVE    A9,A9                           ;DEC TIMER ?
     662                            JREQ    GTL7                            ;NO, ALREADY ZERO
     663                            DEC     A9                              ;DEC IT
     664                    GTL7
     665                            SLEEPK  1
     666                            JRUC    GTL
     667                    GTX
     668                            MOVE    *A13(PDATA),A0,L                ;GET SCORE POINTS
     669                            MOVE    A13,A1
     670                            ADDI    PDATA+020H,A1                   ;POINT TO INITIAL STORAGE
     671                            MOVI     TOD_TAB,A8                     ;ALWAYS ADD TO TODAYS (EVEN IF SPACES)
     672                            CALLR    ADD_ENTRY                      ;ADD EM TO THIS ONE IF NEC.
     673                    
     674                            MOVI     ALL_TAB,A8
     675                            CALLR    ADD_ENTRY                      ;ADD EM TO THE TABLE
     676                            JRC      TOO_BAD                        ;DIDN'T MAKE ALL TIME
     677                    
     678                            CALLR    DELAY_HSRESET                  ;NEW ENTRY....DON'T RESET TOO QUICK
     679                    
     680                    TOO_BAD RETS
     681                     .endif
     682                    
     683                                                    ;RLDU
     684                            
     685 00001c90           IJOYTAB
     686 00001c90       00          .BYTE   0,0             ;0000
     687 00001ca0       00          .BYTE   0,-1            ;0001
     688 00001cb0       00          .BYTE   0,1             ;0010
     689 00001cc0       00          .BYTE   0,0             ;0011
     690 00001cd0       ff          .BYTE   -1,0            ;0100
     691 00001ce0       ff          .BYTE   -1,-1           ;0101
     692 00001cf0       ff          .BYTE   -1,1            ;0110
     693 00001d00       ff          .BYTE   -1,0            ;0111
     694 00001d10       01          .BYTE   1,0             ;1000
     695 00001d20       01          .BYTE   1,-1            ;1001
     696 00001d30       01          .BYTE   1,1             ;1010
     697 00001d40       01          .BYTE   1,0             ;1011
     698 00001d50       00          .BYTE   0,0             ;1100
     699 00001d60       00          .BYTE   0,-1            ;1101
     700 00001d70       00          .BYTE   0,1             ;1110
     701 00001d80       00          .BYTE   0,0             ;1111
     702                    
     703                    
     704 00001d90       41  INITMAT .STRING "ABCDEFGHIJKLMNOPQRSTUVWXYZ!? <"
     705                    
     706 00001e80           A2_CHECK
     707 00001e80     098f          MMTM    SP,A0
         00001e90     8000  
     708 00001ea0     07a0          MOVE    @P1DATA,A0,L            ;FIX!
         00001eb0 00000000! 
     709 00001ed0     4840          CMP     A2,A0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   16

     710 00001ee0     ca04          JREQ    A2_SUCC                 ;IT WAS PLAYER 1'S SCORE
     711                    
     712 00001ef0     07a0          MOVE    @P2DATA,A0,L
         00001f00 00000000! 
     713 00001f20     4840          CMP     A2,A0
     714                    
     715 00001f30     09af  A2_SUCC MMFM    SP,A0
         00001f40     0001  
     716 00001f50     0960          RETS
     717                    
     718 00001f60           CHECK_INITS:
     719 00001f60     098f          MMTM    SP,A0,A1,A2
         00001f70     e000  
     720 00001f80     09c2          MOVI    NUM_INITS,A2
         00001f90     0003  
     721 00001fa0           CHECK_NEXT:
     722 00001fa0     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
     723 00001fb0     ca03          JRZ     SPACE_FOUND             ;NULL IS A SPACE
     724 00001fc0     0b40          CMPI    SPACE,A0                ;IS IT A REAL SPACE?
         00001fd0     ffdf  
     725 00001fe0     cb04          JRNZ    LET_FOUND
     726 00001ff0           SPACE_FOUND:
     727 00001ff0     0b01          ADDI    BYTE_SIZE,A1
         00002000     0008  
     728 00002010     3d02          DSJS    A2,CHECK_NEXT
     729 00002020     5642          CLR     A2                      ;SET Z BIT ON FALL THROUGH
     730                    
     731 00002030           LET_FOUND:
     732 00002030     09af          MMFM    SP,A0,A1,A2
         00002040     0007  
     733 00002050     0960          RETS
     734                    
     735 00002060           CHECK_SCORE:
     736 00002060     098f          MMTM    SP,A1,A3,A9,A10
         00002070     5060  
     737 00002080     4c03          MOVE    A0,A3                   ;STASH SCORE IN A3
     738 00002090     0d3f          CALLR   FIND_TABLE_LEVEL        ;SEE WHERE WE LAND IN THIS TABLE
         000020a0     003b  
     739 000020b0     ca08          JRZ     ANSWER_IN_A0            ;ZERO.....GUY DIDN'T MAKE IT
     740 000020c0     b501          MOVE    *A8(TB_VISIBLE),A1,W    ;GET THE NUMBER "ENTERED"
         000020d0     0030  
     741 000020e0     4820          CMP     A1,A0                   ;A0 MUST BE LESS OR EQUAL
     742 000020f0     c804          JRLO    ANSWER_IN_A0            ;NOT LAST ENTRY...RETURN SUCCESS
     743 00002100     c302          JRHI    DIDNT_MAKE_HSTD
     744 00002110     4843          CMP     A2,A3                   ;HI MUST BE HIGHER THAN BUDDY
     745 00002120     c301          JRHI    ANSWER_IN_A0
     746 00002130           DIDNT_MAKE_HSTD:
     747 00002130     5600          CLR     A0                      ;RETURN FAILURE
     748 00002140           ANSWER_IN_A0:
     749 00002140     4c00          MOVE    A0,A0                   ;SET EQ BIT ACCORDINGLY
     750 00002150     09af          MMFM    SP,A1,A3,A9,A10
         00002160     060a  
     751 00002170     0960          RETS
     752                    
     753 00002180           ADD_ENTRY:
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   17

     754 00002180     098f          MMTM    SP,A0,A1,A2,A3,A4,A7,A9,A10
         00002190     f960  
     755 000021a0     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         000021b0     0089  
     756 000021c0     4c04          MOVE    A0,A4                   ;STASH THE SCORE A SEC.
     757 000021d0     5642          CLR     A2                      ;DONT WORRY ABOUT OTHER GUY AT THIS POINT
     758 000021e0     0d3f          CALLR   CHECK_SCORE             ;DOES THE REQUEST MAKE IT?
         000021f0     ffe6  
     759 00002200     0de0          SETC                            ;ANTICIPATE FAILURE
     760 00002210     ca21          JRZ     DIDNT_MAKE_IT           ;DON'T KNOW WHY I GOT THESE INITS.
     761 00002220     4d43          MOVE    A10,A3                  ;LAST GUY IN TABLE IS DESTINATION
     762                    
     763 00002230           COPY_DOWN_LOOP:
     764 00002230     4c62          MOVE    A3,A2                   ;GUY BEFORE HIM IS SOURCE
     765 00002240     1422          DEC     A2                      ;A2 NOW HAS SOURCE
     766 00002250     4802          CMP     A0,A2                   ;IS SOURCE LOWER THAN OUR SLOT?
     767 00002260     c804          JRLO    COPY_DONE               ;IT IS...DON'T MOVE HIM.
     768                    
     769 00002270     0d3f          CALLR   COPY_ENTRY              ;COPY A2 ENTRY TO A3
         00002280     00a0  
     770 00002290     1423          DEC     A3                      ;MOVE DOWN TO ONE BEFORE
     771 000022a0     c0f8          JRUC    COPY_DOWN_LOOP
     772                    
     773 000022b0           COPY_DONE:
     774 000022b0     0d3f          CALLR   PUT_SCORE_FOR_ENTRY     ;SCORE IN A4 WRITTEN TO ENTRY A0
         000022c0     003a  
     775 000022d0     0d3f          CALLR   PT_ENTRY                ;GET ENTRY POINTER IN A7
         000022e0     006d  
     776 000022f0     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00002300     0040  
     777 00002310     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00002320     0003  
     778 00002330     098f          MMTM    SP,A0                   ;SAVE A0
         00002340     8000  
     779                    
     780 00002350           INIT_COPY_LOOP:
     781 00002350     8e20          MOVB    *A1,A0                  ;GET AN INITIAL
     782 00002360     cb02          JRNZ    NOT_BLANK
     783 00002370     09c0          MOVI    SPACE,A0                ;REPLACE BLANKS WITH SPACES
         00002380     0020  
     784 00002390           NOT_BLANK:
     785 00002390     0d3f          CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
         000023a0     0191  
     786 000023b0     0b01          ADDI    BYTE_SIZE,A1            ;A1 TO NEXT BYTE PLEASE
         000023c0     0008  
     787 000023d0     3d22          DSJ     A2,INIT_COPY_LOOP
     788                    
     789 000023e0     09af          MMFM    SP,A0                   ;GET BACK ENTRY NUMBER
         000023f0     0001  
     790 00002400     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;FOR CHECKSUM FOR THIS ENTRY AND STORE!
         00002410     004c  
     791 00002420     0320          CLRC                            ;RETURN SUCCESS!
     792                    
     793 00002430           DIDNT_MAKE_IT
     794 00002430     09af          MMFM    SP,A0,A1,A2,A3,A4,A7,A9,A10
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   18

         00002440     069f  
     795 00002450     0960          RETS
     796                    
     797 00002460           FIND_TABLE_LEVEL
     798 00002460     098f          MMTM    SP,A1,A2,A3
         00002470     7000  
     799 00002480     0d3f          CALLR   ROM_PTRS                ;SETUP FOR THIS TABLE
         00002490     005b  
     800 000024a0     0d3f          CALLR   VAL_TAB                 ;FIX THE TABLE IN CASE ITS BROKEN.
         000024b0     0095  
     801 000024c0     c809          JRC     FTL_FAIL                ;CAN'T VALIDATE..SAY SCORE DIDN'T MAKE IT
     802                    
     803 000024d0     4c02          MOVE    A0,A2                   ;KEEP SCORE IN A2
     804 000024e0     1820          MOVK    1,A0                    ;START AT 1 AND WORK UP.
     805                    
     806 000024f0           CHECK_NEXT_SCORE:
     807 000024f0     0d3f          CALLR   GET_HSCR                ;FETCH A0 ENTRY'S SCORE IN A1
         00002500     000a  
     808 00002510     4822          CMP     A1,A2                   ;HOW DO WE FARE AGAINST A1?
     809 00002520     c304          JRHI    FOUND_THE_SPOT          ;WE FOUND THE SPOT
     810 00002530     1020          INC     A0                      ;KEEP MOVING DOWN TILL WE FIT
     811 00002540     4940          CMP     A10,A0                  ;ARE WE LOOKING AT THE LAST ONE?
     812 00002550     c2f9          JRLS    CHECK_NEXT_SCORE
     813                    
     814 00002560           FTL_FAIL:
     815 00002560     5600          CLR     A0                      ;WE'RE NOT HIGH ENOUGH RETURN FAILURE
     816                    
     817 00002570           FOUND_THE_SPOT:
     818 00002570     4c00          MOVE    A0,A0                   ;MAKE SURE YOU SET THE FLAGS
     819 00002580     09af          MMFM    SP,A1,A2,A3
         00002590     000e  
     820 000025a0     0960          RETS
     821                    
     822 000025b0           GET_HSCR
     823 000025b0     098f          MMTM    SP,A7,A0
         000025c0     8100  
     824 000025d0     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         000025e0     003d  
     825 000025f0     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
         00002600     0000  
     826 00002610     0d3f          CALLR   RC_LONG                 ;FETCH THE LONG WORD INTO A0
         00002620     0151  
     827 00002630     4c01          MOVE    A0,A1                   ;MOVE TO A1
     828 00002640     09af          MMFM    SP,A7,A0
         00002650     0081  
     829 00002660     0960          RETS
     830                    
     831 00002670           PUT_SCORE_FOR_ENTRY
     832 00002670     098f          MMTM    SP,A7,A0
         00002680     8100  
     833 00002690     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         000026a0     0031  
     834 000026b0     0b07          ADDI    HS_SCORE,A7             ;INDEX SCORE PART.
         000026c0     0000  
     835 000026d0     4c80          MOVE    A4,A0                   ;MOVE SCORE TO A0
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   19

     836 000026e0     0d3f          CALLR   WC_LONG                 ;WRITE OUT THE LONG WORD
         000026f0     0172  
     837 00002700     09af          MMFM    SP,A7,A0
         00002710     0081  
     838 00002720     0960          RETS
     839                    
     840 00002730           FORM_HS_CKSUM:
     841 00002730     098f          MMTM    SP,A0,A4,A6,A7
         00002740     8b00  
     842 00002750     0d3f          CALLR   PT_ENTRY                ;A7 = POINTER TO CURRENT ENTRY
         00002760     0025  
     843 00002770     098f          MMTM    SP,A7                   ;SAVE POINTER TO ENTRY
         00002780     0100  
     844 00002790     09c4          MOVI    HS_BYTES_TO_CHECK,A4    ;COUNT DOWN THE BYTES
         000027a0     0007  
     845 000027b0     5621          CLR     A1                      ;KEEP SUM IN A1
     846 000027c0           ADD_A_BYTE:
     847 000027c0     0d3f          CALLR   RC_BYTEI                ;GET A BYTE INTO A0
         000027d0     0118  
     848 000027e0     4001          ADD     A0,A1                   ;ADD TO SUM
     849 000027f0     3c84          DSJ     A4,ADD_A_BYTE           ;ONE MORE ADDED
     850 00002800     03e1          NOT     A1                      ;CHECKSUM IS NOW IN LOW BYTE
     851 00002810     0b81          ANDI    BYTE_MASK,A1            ;MASK SO ITS COOL
         00002820 ffffff00  
     852 00002840     09af          MMFM    SP,A7                   ;GET POINTER BACK
         00002850     0080  
     853 00002860     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         00002870     0070  
     854 00002880     0d3f          CALLR   RC_BYTE                 ;READ IN THE BYTE
         00002890     00e8  
     855 000028a0     4801          CMP     A0,A1                   ;COMPARE WHAT'S THERE TO WHAT WE GOT
     856 000028b0     09af          MMFM    SP,A0,A4,A6,A7          ;Z BIT RETURNS COMPARE
         000028c0     00d1  
     857 000028d0     0960          RETS                            ;A1 RETURNS CKSUM
     858                    
     859 000028e0           FORM_HS_CKSUM_AND_STORE:
     860 000028e0     098f          MMTM    SP,A0,A7
         000028f0     8100  
     861 00002900     0d3f          CALLR   FORM_HS_CKSUM           ;GET THE CKSUM IN A1, POINTER IN A7
         00002910     ffe1  
     862 00002920     0d3f          CALLR   PT_ENTRY                ;POINT AT THE VALUE
         00002930     0008  
     863 00002940     0b07          ADDI    HS_CKBYTE,A7            ;POINT AT CHECKBYTE
         00002950     0070  
     864 00002960     4c20          MOVE    A1,A0                   ;GET CHECKBYTE TO A0
     865 00002970     0d3f          CALLR   WC_BYTE                 ;WRITE OUT THE BYTE
         00002980     00e4  
     866 00002990     09af          MMFM    SP,A0,A7
         000029a0     0081  
     867 000029b0     0960          RETS
     868                    
     869 000029c0           PT_ENTRY:
     870 000029c0     4940          CMP     A10,A0                  ;A10 IS MAX VALUE
     871 000029d0     c202          JRLS    POINTER_IN_RANGE
     872                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   20

     873                            .IF DEBUG
     874                            JRUC    $                       ;HANG IN DEVELOPMENT
     875                            .ENDIF
     876                    
     877 000029e0     4d27          MOVE    A9,A7                   ;RETURN ZERO OFFSET IN FIELD
     878 000029f0     0960          RETS
     879                    
     880 00002a00           POINTER_IN_RANGE:
     881 00002a00     09c7          MOVI    HS_SIZE,A7              ;SIZE OF ENTRY
         00002a10     0080  
     882 00002a20     5e07          MPYU    A0,A7                   ;OFFSET OF ENTRY
     883 00002a30     4127          ADD     A9,A7                   ;ADD IN THE BASE
     884 00002a40     0960          RETS
     885                    
     886 00002a50           ROM_PTRS:
     887 00002a50     098f          MMTM    SP,A0,A1                ;SCRATCH REGGIES
         00002a60     c000  
     888 00002a70     b709          MOVE    *A8(TB_POINTER),A9,L    ;GET CMOS POINTER
         00002a80     0000  
     889 00002a90     b50a          MOVE    *A8(TB_COUNT),A10,W     ;GET NUMBER OF ENTRIES
         00002aa0     0020  
     890 00002ab0     b501          MOVE    *A8(TB_PAGE_BITS),A1    ;GET OUR CMOS PAGE BITS
         00002ac0     0040  
     891                    
     892 00002ad0     0d3f          CALLR   SET_PAGE
         00002ae0     0003  
     893                    
     894 00002af0     09af          MMFM    SP,A0,A1                ;SCRATCH REGGIES
         00002b00     0003  
     895 00002b10     0960          RETS
     896                    
     897 00002b20           SET_PAGE
     898 00002b20     098f          MMTM    SP,A0,A1
         00002b30     c000  
     899 00002b40     0b81          ANDI    CMOS_PAGE_SELECT_BITS,A1        ;KILL SIGN EXTEND..SAVE BITS
         00002b50 ffffff3f  
     900 00002b70     01e0          PUSHST                                  ;SAVE INTERRUPT STATUS
     901 00002b80     0360          DINT                                    ;STOP INTERRUPTS
     902 00002b90     05a0          MOVE    @SYSCOPY,A0,W                   ;GET THE RAM COPY
         00002ba0 00000000! 
     903 00002bc0     0b80          ANDNI   CMOS_PAGE_SELECT_BITS,A0        ;REMOVE THE CURRENT PAGE SELECT
         00002bd0 000000c0  
     904 00002bf0     5420          OR      A1,A0                           ;ADD IN OUR BITS
     905 00002c00     0580          MOVE    A0,@SYSCOPY,W                   ;PUT THEM BACK IN THE RAM COPY
         00002c10 00000000! 
     906 00002c30     01c0          POPST                                   ;OK TO RE-START INTS
     907 00002c40     09af          MMFM    SP,A0,A1
         00002c50     0003  
     908 00002c60     0960          RETS
     909                    
     910 00002c70           INIT_TAB
     911                     .if 0
     912                            MMTM    SP,A8,A0
     913                    
     914                            MOVI    TOD_TAB,A8
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   21

     915                            CALLR   INIT_TB         ;RESET TODAYS TABLE
     916                    
     917                            CALLR   GET_HSC         ;CHECK THE HIGH SCORE RESET COUNTER
     918                            JRNZ    INIT_TAB1       ;NOT ZERO...NO MORE ACTIVITY
     919                            MOVI    ADJHSRES,A0
     920                            CALLA   GET_ADJ         ;GET THE ADJUSTED VALUE
     921                            JRZ     INIT_TAB1       ;ITS TURNED OFF...NO ACTION.
     922                    
     923                            MOVI    ALL_TAB,A8      ;RESET THE ALL TIME TABLE
     924                            CALLR   INIT_TB         ;INIT THE ALL TIME TABLE
     925                    
     926                            CALLR   INIT_HSR        ;RESET THE COUNTER TO ADJUSTED VALUE
     927                    
     928                    INIT_TAB1
     929                            MMFM    SP,A8,A0
     930                     .endif
     931 00002c70     0960          RETS
     932                    
     933 00002c80           INIT_TB:
     934                     .if 0
     935                            MMTM    SP,A5,A6,A7,A0
     936                            CALLR   ROM_PTRS                ;STUFF TABLE DATA
     937                            MOVE    *A8(TB_FACTORY),A6,L ;GET THE FACTORY TABLE
     938                            MOVE    A10,A5                  ;NUMBER OF VALID ENTRIES
     939                            INC     A5                      ;1 MORE TO HOLD ZERO ENTRY
     940                            MOVI    HS_SIZE_IN_BYTES,A1     ;SIZE OF 1 ENTRY
     941                            MPYU    A1,A5                   ;A7 HAS NUMBER OF WORDS TO MOVE
     942                            MOVE    A9,A7                   ;CMOS POINTER IN A7
     943                    
     944                    INIT_TB_1:
     945                            MOVB    *A6,A0                  ;GET A BYTE FROM ROM
     946                            ADDI    BYTE_SIZE,A6            ;KICK ROM POINTER
     947                            CALLR   WC_BYTEI                ;WRITE THE BYTE AND INCREMENT
     948                            DSJS    A5,INIT_TB_1            ;UNTIL THEY'RE ALL THERE.
     949                    
     950                            MOVE    A10,A0                  ;POINT AT LAST ENTRY
     951                    INIT_TB_2:
     952                            CALLR   FORM_HS_CKSUM_AND_STORE ;SET ITS CHECKSUM
     953                            DEC     A0                      ;MOVE DOWN
     954                            JRNN    INIT_TB_2               ;SET EACH ONE INCLUDING ZERO
     955                            MMFM    SP,A5,A6,A7,A0
     956                     .endif
     957 00002c80     0960          RETS
     958                    
     959 00002c90           COPY_ENTRY:
     960 00002c90     098f          MMTM    SP,A0,A4,A5,A6,A7
         00002ca0     8f00  
     961 00002cb0     09c4          MOVI    HS_SIZE_IN_BYTES,A4     ;ENTRY SIZE IN BYTES
         00002cc0     0008  
     962 00002cd0     4c40          MOVE    A2,A0                   ;FIRST POINT FOR A0
     963 00002ce0     0d3f          CALLR   PT_ENTRY        
         00002cf0     ffcc  
     964 00002d00     4ce6          MOVE    A7,A6                   ;A6 = SOURCE POINTER
     965 00002d10     4c60          MOVE    A3,A0
     966 00002d20     0d3f          CALLR   PT_ENTRY                ;A5 = DESTINATION
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   22

         00002d30     ffc8  
     967 00002d40     4ce5          MOVE    A7,A5
     968 00002d50           COPY_LOOP:
     969 00002d50     4cc7          MOVE    A6,A7                   ;SOURCE IN CMOS REGGIE
     970 00002d60     0d3f          CALLR   RC_BYTEI                ;FETCH A WORD
         00002d70     00be  
     971 00002d80     4ce6          MOVE    A7,A6
     972 00002d90     4ca7          MOVE    A5,A7                   ;DESTINATION
     973 00002da0     0d3f          CALLR   WC_BYTEI                ;WRITE IT
         00002db0     00f0  
     974 00002dc0     4ce5          MOVE    A7,A5                   ;BACK TO DEST REGGIE
     975 00002dd0     3d24          DSJ     A4,COPY_LOOP            ;UNTIL ALL WORDS ARE COPIED
     976 00002de0     09af          MMFM    SP,A0,A4,A5,A6,A7
         00002df0     00f1  
     977 00002e00     0960          RETS
     978                    
     979 00002e10           VAL_TAB
     980 00002e10     5642          CLR     A2              ;indicate first call in
     981 00002e20     0d3f          CALLR   DO_VALIDATE     ;validate
         00002e30     0001  
     982 00002e40     0960          RETS
     983                    
     984 00002e50           DO_VALIDATE
     985 00002e50     098f          MMTM    SP,A0,A1,A3,A4,A5,A6,A7
         00002e60     df00  
     986 00002e70     0d3f          CALLR   ROM_PTRS                ;SETUP FOR TABLE
         00002e80     ffbc  
     987 00002e90     09c0          MOVI    1,A0                    ;ITERATE THROUGH THE ENTRIES
         00002ea0     0001  
     988 00002eb0     5621          CLR     A1                      ;COUNT ERRORS
     989                    
     990 00002ec0           CHECK_A0_ENTRY:
     991 00002ec0     0d3f          CALLR   CHECK_ENTRY             ;IS THE ENTRY OK?
         00002ed0     001d  
     992 00002ee0     c911          JRNC    VT_1                    ;YEP.
     993                    
     994 00002ef0     0d3f          CALLR   REMOVE_ENTRY            ;REMOVE THIS ENTRY
         00002f00     005f  
     995 00002f10     1021          INC     A1
     996 00002f20     b503          MOVE    *A8(TB_ERROR_COUNT),A3  ;GET THRESHOLD
         00002f30     0070  
     997 00002f40     4861          CMP     A3,A1                   ;ARE WE THERE?
     998 00002f50     c8f6          JRLO    CHECK_A0_ENTRY          ;NOPE...CHECK MOVE UP ENTRY AT A0
     999 00002f60     4c42          MOVE    A2,A2                   ;IS THIS RECURSIVE CHECK AFTER INIT?
    1000 00002f70     cb0f          JRNZ    CANT_VALIDATE           ;THEN RETURN FAILURE
    1001                    
    1002 00002f80     0d3f          CALLR   INIT_TB                 ;INIT THIS TABLE PLEASE
         00002f90     ffce  
    1003 00002fa0     1822          MOVK    1,A2                    ;INDICATE RECURSIVE CALL
    1004 00002fb0     0d3f          CALLR   DO_VALIDATE             ;IS IT ALRIGHT NOW?
         00002fc0     ffe8  
    1005 00002fd0     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         00002fe0     00fb  
    1006 00002ff0     0960          RETS
    1007 00003000           VT_1:   
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   23

    1008 00003000     1020          INC     A0                      ;KICK IT
    1009 00003010     4940          CMP     A10,A0                  ;STILL IN TABLE?
    1010 00003020     c2e9          JRLS    CHECK_A0_ENTRY          ;YEP....CHECK THIS ENTRY
    1011                    
    1012 00003030     0320          CLRC                            ;RETURN VALID!
    1013 00003040     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         00003050     00fb  
    1014 00003060     0960          RETS
    1015                    
    1016 00003070           CANT_VALIDATE:
    1017 00003070     0de0          SETC                            ;RETURN FAILURE!
    1018 00003080     09af          MMFM    SP,A0,A1,A3,A4,A5,A6,A7
         00003090     00fb  
    1019 000030a0     0960          RETS
    1020                    
    1021 000030b0           CHECK_ENTRY
    1022 000030b0     098f          MMTM    SP,A0,A1,A2,A3,A7
         000030c0     f100  
    1023 000030d0     0d3f          CALLR   FORM_HS_CKSUM           ;CHECK OUT CKSUM FIRST
         000030e0     ff64  
    1024 000030f0     cb23          JRNZ    CHECK_FAIL              ;BAD CHECKSUM....ITS BAD
    1025 00003100     0d3f          CALLR   GET_HSCR                ;SCORE IN A1
         00003110     ff49  
    1026 00003120     4c23          MOVE    A1,A3                   ;SAVE COPY OF SCORE
    1027                    
    1028 00003130           CHECK_DIGIT:
    1029 00003130     4c22          MOVE    A1,A2                   ;COPY FOR NEXT NIBBLE
    1030 00003140     0b82          ANDI    0FH,A2                  ;MASK THE NIBBLE
         00003150 fffffff0  
    1031 00003170     0b42          CMPI    9,A2
         00003180     fff6  
    1032 00003190     c319          JRHI    CHECK_FAIL              ;NIBBLE TOO HIGH
    1033 000031a0     2f81          SRL     4,A1                    ;SHIFT DOWN TO NEXT NIBBLE
    1034 000031b0     cbf7          JRNZ    CHECK_DIGIT
    1035                    
    1036 000031c0     1420          DEC     A0                      ;MAKE SURE WE ARE LOWER THAN PREVIOUS SCORE!
    1037 000031d0     ca04          JREQ    FIRST_ENT               ;WE'RE THE 1ST IN THE TABLE
    1038                    
    1039 000031e0     0d3f          CALLR   GET_HSCR                ;GET THE SCORE FOR THE GUY BEFORE US
         000031f0     ff3b  
    1040 00003200     4823          CMP     A1,A3                   ;OURS MUST BE LOWER OR SAME
    1041 00003210     c311          JRHI    CHECK_FAIL              ;OURS IS BIGGER....REMOVE US
    1042                    
    1043 00003220           FIRST_ENT:
    1044 00003220     1020          INC     A0                      ;RESTORE THE ENTRY NUMBER
    1045 00003230     0d3f          CALLR   PT_ENTRY                ;POINT A7 AT ENTRY
         00003240     ff77  
    1046 00003250     0b07          ADDI    HS_INITS,A7             ;POINT AT FIRST INITIAL
         00003260     0040  
    1047 00003270     09c2          MOVI    NUM_INITS,A2            ;THIS IS NUMBER OF INITIALS
         00003280     0003  
    1048                    
    1049 00003290           NEXT_LETTER:
    1050 00003290     0d3f          CALLR   RC_BYTEI                ;FETCH A BYTE
         000032a0     006b  
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   24

    1051                    
    1052 000032b0     0d3f          CALLR   VERIFY_LETTER           ;SEE IF ITS VALID.
         000032c0     000a  
    1053 000032d0     c805          JRC     CHECK_FAIL              ;NOT A LETTER...BYTE
    1054                    
    1055 000032e0     3cc2          DSJ     A2,NEXT_LETTER
    1056                    
    1057 000032f0     0320          CLRC                            ;RETURN PASS
    1058 00003300     09af          MMFM    SP,A0,A1,A2,A3,A7
         00003310     008f  
    1059 00003320     0960          RETS
    1060                    
    1061 00003330           CHECK_FAIL:
    1062 00003330     0de0          SETC
    1063 00003340     09af          MMFM    SP,A0,A1,A2,A3,A7
         00003350     008f  
    1064 00003360     0960          RETS
    1065                    
    1066                    
    1067                    
    1068 00003370           VERIFY_LETTER:
    1069 00003370     0b80          ANDI    BYTE_MASK,A0            ;KEEP JUST THE BYTE
         00003380 ffffff00  
    1070                    
    1071 000033a0     0b40          CMPI    '!',A0                  ;SPACE?
         000033b0     ffde  
    1072 000033c0     ca0f          JREQ    VERIFY_PASS             ;ITS OK.
    1073                    
    1074 000033d0     0b40          CMPI    '%',A0                  ;SPACE?
         000033e0     ffda  
    1075 000033f0     ca0c          JREQ    VERIFY_PASS             ;ITS OK.
    1076                    
    1077 00003400     0b40          CMPI    '?',A0                  ;SPACE?
         00003410     ffc0  
    1078 00003420     ca09          JREQ    VERIFY_PASS             ;ITS OK.
    1079                    
    1080 00003430     0b40          CMPI    SPACE,A0                ;SPACE?
         00003440     ffdf  
    1081 00003450     ca06          JREQ    VERIFY_PASS             ;ITS OK.
    1082                    
    1083 00003460     0b40          CMPI    LET_A,A0                ;BETWEEN A-Z?
         00003470     ffbe  
    1084 00003480     c805          JRLO    VERIFY_FAIL
    1085                    
    1086 00003490     0b40          CMPI    LET_Z,A0
         000034a0     ffa5  
    1087 000034b0     c302          JRHI    VERIFY_FAIL
    1088                    
    1089 000034c0           VERIFY_PASS:
    1090 000034c0     0320          CLRC
    1091 000034d0     0960          RETS
    1092                    
    1093 000034e0           VERIFY_FAIL:
    1094 000034e0     0de0          SETC
    1095 000034f0     0960          RETS
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   25

    1096                    
    1097 00003500           REMOVE_ENTRY:
    1098 00003500     098f          MMTM    SP,A0,A1,A2,A6,A7
         00003510     e300  
    1099 00003520     4c03          MOVE    A0,A3                   ;THIS IS DEST
    1100 00003530     4c62          MOVE    A3,A2                   ;SOURCE IS 1 BELOW
    1101                    
    1102 00003540           BUBBLE_ANOTHER:
    1103 00003540     1022          INC     A2                      ;NOW WE'RE SET FOR A COPY...
    1104                    
    1105 00003550     4942          CMP     A10,A2                  ;IS SOURCE OUT OF RANGE?
    1106 00003560     c304          JRHI    BUBBLE_DONE             ;YEP....WE'RE AT THE BOTTOM (A3)
    1107                    
    1108 00003570     0d3f          CALLR   COPY_ENTRY
         00003580     ff70  
    1109 00003590     1023          INC     A3
    1110 000035a0     c0f9          JRUC    BUBBLE_ANOTHER
    1111                    
    1112 000035b0           BUBBLE_DONE:
    1113 000035b0     4c60          MOVE    A3,A0                   ;THIS IS BOTTOM OF TABLE
    1114 000035c0     0d3f          CALLR   PT_ENTRY                ;A7 POINTS AT CMOS BLOCK
         000035d0     ff3e  
    1115                    
    1116 000035e0     b706          MOVE    *A8(TB_FACTORY),A6,L    ;GET FACTORY TABLE
         000035f0     0050  
    1117 00003600     09c1          MOVI    HS_ROM_SIZE,A1          ;SIZE OF ENTRY
         00003610     0040  
    1118 00003620     5f41          MPYU    A10,A1                  ;TIMES NUMBER OF VALID ENTRIES..POINTS AT LAST.
    1119 00003630     4026          ADD     A1,A6                   ;NOW WE POINT AT END OF ROM TABLE
    1120 00003640     09c2          MOVI    HS_SIZE_IN_BYTES,A2     ;SIZE OF ENTRY
         00003650     0008  
    1121                    
    1122 00003660           REPLACE_LOOP:
    1123 00003660     8ec0          MOVB    *A6,A0                  ;MOVE A ROM BYTE TO A0
    1124 00003670     0b06          ADDI    BYTE_SIZE,A6
         00003680     0008  
    1125 00003690     0d3f          CALLR   WC_BYTEI                ;WRITE THE WORD AND INCREMENT
         000036a0     0061  
    1126 000036b0     3cc2          DSJ     A2,REPLACE_LOOP         ;UNTIL THEY'RE ALL THERE.
    1127                    
    1128 000036c0     4d40          MOVE    A10,A0                  ;POINT AT "LAST" ENTRY
    1129 000036d0     0d3f          CALLR   FORM_HS_CKSUM_AND_STORE ;STORE THE CHECKBYTE
         000036e0     ff1f  
    1130 000036f0     09af          MMFM    SP,A0,A1,A2,A6,A7       ;AND RETURN
         00003700     00c7  
    1131 00003710     0960          RETS
    1132                    
    1133                    
    1134                    
    1135                    
    1136 00003720           RC_BYTE
    1137                            .if     TUNIT
    1138                    
    1139 00003720     05a0          move    @SYSCOPY,a0
         00003730 00000000! 
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   26

    1140 00003750     2700          sll     32-8,a0
    1141 00003760     2c40          srl     32-2,a0
    1142 00003770     25e0          sll     15,a0           ;Page offset
    1143 00003780     40e0          add     a7,a0
    1144 00003790     8e00          movb    *a0,a0
    1145 000037a0     2700          sll     32-8,a0
    1146 000037b0     2d00          srl     32-8,a0
    1147 000037c0     0960          rets
    1148                    
    1149                            .else
    1150                    
    1151                            movb    *a7,a0
    1152                            sll     32-8,a0
    1153                            srl     32-8,a0
    1154                            rets
    1155                    
    1156                            .endif
    1157                    
    1158 000037d0           WC_BYTE
    1159                            .IF     YUNIT
    1160 000037d0     a22f          MOVE    A1,-*SP,L
    1161 000037e0     09c1          MOVI    0200H,A1        ;UNLOCK THE CMOS
         000037f0     0200  
    1162 00003800     0581          MOVE    A1,@SECCHIP
         00003810 01c00060  
    1163                            .ENDIF
    1164                    
    1165                            .if     TUNIT
    1166                    
    1167 00003830     05a1          move    @SYSCOPY,a1
         00003840 00000000! 
    1168 00003860     2701          sll     32-8,a1
    1169 00003870     2c41          srl     32-2,a1
    1170 00003880     25e1          sll     15,a1           ;Page offset
    1171 00003890     40e1          add     a7,a1
    1172 000038a0     0580          move    a0,@CMOSWE
         000038b0 014ffff0  
    1173 000038d0     8c01          movb    a0,*a1
    1174                    
    1175                            .else
    1176                    
    1177                            movb    a0,*a7          ;Write byte
    1178                    
    1179                            .endif
    1180                    
    1181                            .IF     YUNIT
    1182 000038e0     09c1          MOVI    0300H,A1        ;LOCK THE CMOS
         000038f0     0300  
    1183 00003900     0581          MOVE    A1,@SECCHIP
         00003910 01c00060  
    1184 00003930     09af          MMFM    SP,A1
         00003940     0002  
    1185                            .ENDIF
    1186                    
    1187 00003950     0960          rets
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   27

    1188                    
    1189 00003960           RC_BYTEI:
    1190 00003960     0d3f          CALLR   RC_BYTE
         00003970     ffda  
    1191 00003980     0b07          ADDI    C_BYTE_SIZE,A7  ;WORDS SEPARATE CMOS BYTES.
         00003990     0010  
    1192 000039a0     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    1193 000039b0     0960          RETS
    1194                    
    1195 000039c0           RC_WORD:
    1196 000039c0     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         000039d0     4100  
    1197 000039e0     0d3f          CALLR   RC_BYTEI        ;GET A BYTE
         000039f0     fff6  
    1198 00003a00     4c01          MOVE    A0,A1           ;SAVE IN A1
    1199 00003a10     0b81          ANDI    BYTE_MASK,A1    ;MASK ONLY BYTE
         00003a20 ffffff00  
    1200 00003a40     2501          SLL     8,A1            ;SHIFT TO HIGH BYTE
    1201 00003a50     0d3f          CALLR   RC_BYTE         ;GET THE 2ND BYTE
         00003a60     ffcb  
    1202 00003a70     0b80          ANDI    BYTE_MASK,A0
         00003a80 ffffff00  
    1203 00003aa0     5420          OR      A1,A0           ;A0 HAS THE WORD
    1204 00003ab0     09af          MMFM    SP,A1,A7        
         00003ac0     0082  
    1205 00003ad0     0960          RETS
    1206                    
    1207 00003ae0           RC_WORDI:
    1208 00003ae0     0d3f          CALLR   RC_WORD
         00003af0     ffec  
    1209 00003b00     0b07          ADDI    C_WORD_SIZE,A7  ;LONG SEPARATE CMOS WORDS.
         00003b10     0020  
    1210 00003b20     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    1211 00003b30     0960          RETS
    1212                    
    1213 00003b40           RC_LONG:
    1214 00003b40     098f          MMTM    SP,A1,A7        ;USE A1 TO COMBINE BYTES
         00003b50     4100  
    1215 00003b60     0d3f          CALLR   RC_WORDI        ;GET A WORD
         00003b70     fff6  
    1216 00003b80     4c01          MOVE    A0,A1           ;SAVE IN A1
    1217 00003b90     0b81          ANDI    WORD_MASK,A1    ;MASK ONLY WORD
         00003ba0 ffff0000  
    1218 00003bc0     2601          SLL     16,A1           ;SHIFT TO HIGH WORD
    1219 00003bd0     0d3f          CALLR   RC_WORD         ;GET THE 2ND WORD
         00003be0     ffdd  
    1220 00003bf0     0b80          ANDI    WORD_MASK,A0
         00003c00 ffff0000  
    1221 00003c20     5420          OR      A1,A0           ;A0 HAS THE LONG WORD
    1222 00003c30     09af          MMFM    SP,A1,A7        
         00003c40     0082  
    1223 00003c50     0960          RETS
    1224                    
    1225 00003c60           RC_LONGI:
    1226 00003c60     0d3f          CALLR   RC_LONG
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   28

         00003c70     ffec  
    1227 00003c80     0b07          ADDI    C_LONG_SIZE,A7  ;DOUBLE THE DISTANCE FOR BRAIN DAMIJ
         00003c90     0040  
    1228 00003ca0     4c00          MOVE    A0,A0           ;RETURN FLAGS ACCORDINGLY
    1229 00003cb0     0960          RETS
    1230                    
    1231 00003cc0           WC_BYTEI:
    1232 00003cc0     0d3f          CALLR   WC_BYTE
         00003cd0     ffaf  
    1233 00003ce0     0b07          ADDI    C_BYTE_SIZE,A7
         00003cf0     0010  
    1234 00003d00     0960          RETS
    1235                    
    1236 00003d10           WC_WORD:
    1237 00003d10     098f          MMTM    SP,A0,A1,A7
         00003d20     c100  
    1238 00003d30     4c01          MOVE    A0,A1           ;MAKE COPY OF WORD
    1239 00003d40     2f00          SRL     8,A0            ;GET HIGH BYTE IN A0
    1240 00003d50     0d3f          CALLR   WC_BYTEI        ;WRITE THE HIGH BYTE
         00003d60     fff5  
    1241 00003d70     4c20          MOVE    A1,A0           ;NOW GET THE LOW BYTE BACK
    1242 00003d80     0d3f          CALLR   WC_BYTE ;WRITE IT
         00003d90     ffa3  
    1243 00003da0     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00003db0     0083  
    1244 00003dc0     0960          RETS
    1245                    
    1246 00003dd0           WC_WORDI:
    1247 00003dd0     0d3f          CALLR   WC_WORD
         00003de0     fff2  
    1248 00003df0     0b07          ADDI    C_WORD_SIZE,A7
         00003e00     0020  
    1249 00003e10     0960          RETS
    1250                    
    1251 00003e20           WC_LONG:
    1252 00003e20     098f          MMTM    SP,A0,A1,A7
         00003e30     c100  
    1253 00003e40     4c01          MOVE    A0,A1           ;MAKE COPY OF LONG
    1254 00003e50     2e00          SRL     16,A0           ;GET HIGH WORD IN A0
    1255 00003e60     0d3f          CALLR   WC_WORDI        ;WRITE THE HIGH WORD
         00003e70     fff5  
    1256 00003e80     4c20          MOVE    A1,A0           ;NOW GET THE LOW WORD BACK
    1257 00003e90     0d3f          CALLR   WC_WORD ;WRITE IT
         00003ea0     ffe6  
    1258 00003eb0     09af          MMFM    SP,A0,A1,A7     ;AND RESTORE ALL WE TOUCHED
         00003ec0     0083  
    1259 00003ed0     0960          RETS
    1260                    
    1261 00003ee0           WC_LONGI:
    1262 00003ee0     0d3f          CALLR   WC_LONG
         00003ef0     fff2  
    1263 00003f00     0b07          ADDI    C_LONG_SIZE,A7
         00003f10     0040  
    1264 00003f20     0960          RETS
    1265                    
TMS340 COFF Macro Assembler Version 6.10     Tue Dec 19 01:45:20 2023
 Copyright (c) 1985-1991  Texas Instruments Incorporated 

robo high-score-to-date management                                   PAGE   29

    1266                    
    1267              0000  TB_POINTER       EQU     0                      ;LONG-POINTER TO BEGINNING OF TABLE
    1268              0020  TB_COUNT         EQU     TB_POINTER+LONG_SIZE   ;WORD....# IN THE TABLE.
    1269              0030  TB_VISIBLE       EQU     TB_COUNT+WORD_SIZE     ;WORD....NUMBER DISPLAYED
    1270              0040  TB_PAGE_BITS     EQU     TB_VISIBLE+WORD_SIZE   ;WORD....STATUS WORD FOR CMOS PAGE
    1271              0050  TB_FACTORY       EQU     TB_PAGE_BITS+WORD_SIZE ;LONG....ROM STARTUP TABLE
    1272              0070  TB_ERROR_COUNT   EQU     TB_FACTORY+LONG_SIZE   ;WORD....NUM ERRORS TO RE-INIT
    1273                    
    1274                    
    1275                    SCRM    .MACRO  a,b
    1276                            .byte   :a:/01000000H,:a:/010000H&0ffH,:a:/0100H&0ffH,:a:&0ffH
    1277                            .byte   ":b:",0
    1278                            .ENDM
    1279                    
    1280                    
    1281 00003f30           ALL_TIME_ROM_TABLE
    1282 00003f30                   SCRM    022122145H,"EPJ"                ;****ZERO ENTRY...NOT SEEN!
    1283              0040  ROM_ENTRY_SIZE  EQU     $-ALL_TIME_ROM_TABLE
    1284 00003f70                   SCRM    0484692H,"MJT"
    1285 00003fb0                   SCRM    0434010H,"SL!"
    1286 00003ff0                   SCRM    0366892H,"JON"
    1287 00004030                   SCRM    0296096H,"SYD"
    1288 00004070                   SCRM    0265237H,"HEY"
    1289 000040b0                   SCRM    0215782H,"EJB"
    1290 000040f0                   SCRM    0182074H,"DRJ"
    1291 00004130                   SCRM    0146892H,"PJS"
    1292 00004170                   SCRM    0130523H,"GNP"
    1293 000041b0                   SCRM    0118913H,"TIM"
    1294              000b  ALL_TIME_ENTRIES        EQU     ($-ALL_TIME_ROM_TABLE)/ROM_ENTRY_SIZE
    1295                    
    1296 000041f0           TODAYS_ROM_TABLE
    1297 000041f0                   SCRM    022122145H,"EPJ"                ;****ZERO ENTRY...NOT SEEN!
    1298 00004230                   SCRM    0111111H,"SL!"
    1299 00004270                   SCRM    094477H,"EPJ"
    1300 000042b0                   SCRM    080486H,"LED"
    1301 000042f0                   SCRM    070882H,"DAN"
    1302 00004330                   SCRM    068040H,"DJT"
    1303 00004370                   SCRM    059104H,"JPW"
    1304 000043b0                   SCRM    040450H,"NED"
    1305 000043f0                   SCRM    038780H,"MJT"
    1306 00004430                   SCRM    028088H,"BUY"
    1307 00004470                   SCRM    016502H,"WMS"
    1308                    
    1309              000b  TODAYS_ENTRIES  EQU     ($-TODAYS_ROM_TABLE)/ROM_ENTRY_SIZE
    1310                    
    1311                             .END

 No Errors,  No Warnings
